
main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <Default_Handler>:
#pragma weak DMA2_Channel2_IRQHandler	= Default_Handler
#pragma weak DMA2_Channel3_IRQHandler	= Default_Handler
#pragma weak DMA2_Channel4_5_IRQHandler	= Default_Handler

void Default_Handler(void)
{
 8000000:	e7fe      	b.n	8000000 <Default_Handler>
 8000002:	bf00      	nop

08000004 <Reset_Handler>:
	/* zero the bss segment */
	dst = &_sbss;
	while(dst < &_ebss)
		*(dst++) = 0;
}
void Reset_Handler(void) {
 8000004:	4668      	mov	r0, sp
 8000006:	f020 0107 	bic.w	r1, r0, #7
 800000a:	468d      	mov	sp, r1
void __Init_Data(void) {
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
 800000c:	4814      	ldr	r0, [pc, #80]	; (8000060 <Reset_Handler+0x5c>)
 800000e:	4915      	ldr	r1, [pc, #84]	; (8000064 <Reset_Handler+0x60>)
 8000010:	4281      	cmp	r1, r0
	/* zero the bss segment */
	dst = &_sbss;
	while(dst < &_ebss)
		*(dst++) = 0;
}
void Reset_Handler(void) {
 8000012:	b508      	push	{r3, lr}
void __Init_Data(void) {
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
 8000014:	d009      	beq.n	800002a <Reset_Handler+0x26>
		while(dst < &_edata)
 8000016:	4b14      	ldr	r3, [pc, #80]	; (8000068 <Reset_Handler+0x64>)
 8000018:	4298      	cmp	r0, r3
 800001a:	d206      	bcs.n	800002a <Reset_Handler+0x26>
 800001c:	43c2      	mvns	r2, r0
 800001e:	4413      	add	r3, r2
 8000020:	f023 0203 	bic.w	r2, r3, #3
 8000024:	3204      	adds	r2, #4
 8000026:	f000 f905 	bl	8000234 <memcpy>
			*(dst++) = *(src++);
	/* zero the bss segment */
	dst = &_sbss;
	while(dst < &_ebss)
 800002a:	4810      	ldr	r0, [pc, #64]	; (800006c <Reset_Handler+0x68>)
 800002c:	4b10      	ldr	r3, [pc, #64]	; (8000070 <Reset_Handler+0x6c>)
 800002e:	4298      	cmp	r0, r3
 8000030:	d207      	bcs.n	8000042 <Reset_Handler+0x3e>
 8000032:	43c2      	mvns	r2, r0
 8000034:	4413      	add	r3, r2
 8000036:	f023 0203 	bic.w	r2, r3, #3
 800003a:	3204      	adds	r2, #4
 800003c:	2100      	movs	r1, #0
 800003e:	f000 f995 	bl	800036c <memset>
		*(dst++) = 0;
}
void Reset_Handler(void) {
	__Init_Data(); /* Initialize memory, data and bss */
	extern u32 _isr_vectors_offs; /* the offset to the vector table in ram */
	SCB->VTOR = 0x08000000 | ((u32)&_isr_vectors_offs & (u32)0x1FFFFF80); /* set interrupt vector table address */
 8000042:	4b0c      	ldr	r3, [pc, #48]	; (8000074 <Reset_Handler+0x70>)
 8000044:	4a0c      	ldr	r2, [pc, #48]	; (8000078 <Reset_Handler+0x74>)
 8000046:	f023 4368 	bic.w	r3, r3, #3892314112	; 0xe8000000
 800004a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800004e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000052:	6093      	str	r3, [r2, #8]
	SystemInit(); /* configure the clock */
 8000054:	f000 f83a 	bl	80000cc <SystemInit>
	main(); /* start execution of the program */
 8000058:	f000 f986 	bl	8000368 <main>
 800005c:	e7fe      	b.n	800005c <Reset_Handler+0x58>
 800005e:	bf00      	nop
 8000060:	20000000 	.word	0x20000000
 8000064:	08000408 	.word	0x08000408
 8000068:	20000014 	.word	0x20000014
 800006c:	20000014 	.word	0x20000014
 8000070:	20000014 	.word	0x20000014
 8000074:	00000408 	.word	0x00000408
 8000078:	e000ed00 	.word	0xe000ed00

0800007c <__Init_Data>:
void __Init_Data(void) {
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
 800007c:	490e      	ldr	r1, [pc, #56]	; (80000b8 <__Init_Data+0x3c>)
 800007e:	480f      	ldr	r0, [pc, #60]	; (80000bc <__Init_Data+0x40>)
 8000080:	4281      	cmp	r1, r0
 0, 0, 0, 0, 0,
 0, 0, 0,
 (intfunc)0xF1E0F85F
/* @0x1E0. This is for boot in RAM mode for STM32F10x High Density devices. */
};
void __Init_Data(void) {
 8000082:	b508      	push	{r3, lr}
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
 8000084:	d009      	beq.n	800009a <__Init_Data+0x1e>
		while(dst < &_edata)
 8000086:	4b0e      	ldr	r3, [pc, #56]	; (80000c0 <__Init_Data+0x44>)
 8000088:	4298      	cmp	r0, r3
 800008a:	d206      	bcs.n	800009a <__Init_Data+0x1e>
 800008c:	43c2      	mvns	r2, r0
 800008e:	441a      	add	r2, r3
 8000090:	f022 0203 	bic.w	r2, r2, #3
 8000094:	3204      	adds	r2, #4
 8000096:	f000 f8cd 	bl	8000234 <memcpy>
			*(dst++) = *(src++);
	/* zero the bss segment */
	dst = &_sbss;
	while(dst < &_ebss)
 800009a:	480a      	ldr	r0, [pc, #40]	; (80000c4 <__Init_Data+0x48>)
 800009c:	4b0a      	ldr	r3, [pc, #40]	; (80000c8 <__Init_Data+0x4c>)
 800009e:	4298      	cmp	r0, r3
 80000a0:	d209      	bcs.n	80000b6 <__Init_Data+0x3a>
 80000a2:	43c2      	mvns	r2, r0
 80000a4:	441a      	add	r2, r3
 80000a6:	f022 0203 	bic.w	r2, r2, #3
 80000aa:	3204      	adds	r2, #4
 80000ac:	2100      	movs	r1, #0
		*(dst++) = 0;
}
 80000ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80000b2:	f000 b95b 	b.w	800036c <memset>
 80000b6:	bd08      	pop	{r3, pc}
 80000b8:	08000408 	.word	0x08000408
 80000bc:	20000000 	.word	0x20000000
 80000c0:	20000014 	.word	0x20000014
 80000c4:	20000014 	.word	0x20000014
 80000c8:	20000014 	.word	0x20000014

080000cc <SystemInit>:
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80000cc:	4b36      	ldr	r3, [pc, #216]	; (80001a8 <SystemInit+0xdc>)

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80000ce:	4837      	ldr	r0, [pc, #220]	; (80001ac <SystemInit+0xe0>)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80000d0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80000d2:	2100      	movs	r1, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80000d4:	f042 0201 	orr.w	r2, r2, #1
 80000d8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80000da:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80000dc:	681a      	ldr	r2, [r3, #0]
 80000de:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80000e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80000e6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80000e8:	6058      	str	r0, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80000ea:	681a      	ldr	r2, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80000ec:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80000ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80000f2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80000f4:	60d9      	str	r1, [r3, #12]
{
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80000f6:	9100      	str	r1, [sp, #0]
 80000f8:	9101      	str	r1, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80000fa:	681a      	ldr	r2, [r3, #0]
 80000fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000100:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000102:	461a      	mov	r2, r3
 8000104:	e003      	b.n	800010e <SystemInit+0x42>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000106:	9b00      	ldr	r3, [sp, #0]
 8000108:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800010c:	d009      	beq.n	8000122 <SystemInit+0x56>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800010e:	6813      	ldr	r3, [r2, #0]
 8000110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000114:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 8000116:	9b00      	ldr	r3, [sp, #0]
 8000118:	3301      	adds	r3, #1
 800011a:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800011c:	9b01      	ldr	r3, [sp, #4]
 800011e:	2b00      	cmp	r3, #0
 8000120:	d0f1      	beq.n	8000106 <SystemInit+0x3a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000122:	4b21      	ldr	r3, [pc, #132]	; (80001a8 <SystemInit+0xdc>)
 8000124:	681b      	ldr	r3, [r3, #0]
 8000126:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 800012a:	bf18      	it	ne
 800012c:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800012e:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000130:	9b01      	ldr	r3, [sp, #4]
 8000132:	2b01      	cmp	r3, #1
 8000134:	d005      	beq.n	8000142 <SystemInit+0x76>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000136:	4b1e      	ldr	r3, [pc, #120]	; (80001b0 <SystemInit+0xe4>)
 8000138:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800013c:	609a      	str	r2, [r3, #8]
#endif
}
 800013e:	b002      	add	sp, #8
 8000140:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000142:	4b19      	ldr	r3, [pc, #100]	; (80001a8 <SystemInit+0xdc>)
    PWR->CR |= PWR_CR_VOS;
 8000144:	491b      	ldr	r1, [pc, #108]	; (80001b4 <SystemInit+0xe8>)
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000146:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000148:	481b      	ldr	r0, [pc, #108]	; (80001b8 <SystemInit+0xec>)
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800014a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800014e:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000150:	680a      	ldr	r2, [r1, #0]
 8000152:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000156:	600a      	str	r2, [r1, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000158:	689a      	ldr	r2, [r3, #8]
 800015a:	609a      	str	r2, [r3, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800015c:	689a      	ldr	r2, [r3, #8]
 800015e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000162:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000164:	689a      	ldr	r2, [r3, #8]
 8000166:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800016a:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800016c:	6058      	str	r0, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800016e:	681a      	ldr	r2, [r3, #0]
 8000170:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000174:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000176:	461a      	mov	r2, r3
 8000178:	6811      	ldr	r1, [r2, #0]
 800017a:	4b0b      	ldr	r3, [pc, #44]	; (80001a8 <SystemInit+0xdc>)
 800017c:	0189      	lsls	r1, r1, #6
 800017e:	d5fb      	bpl.n	8000178 <SystemInit+0xac>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx || STM32F446xx || STM32F469_479xx */

#if defined(STM32F40_41xxx)  || defined(STM32F412xG)  
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000180:	4a0e      	ldr	r2, [pc, #56]	; (80001bc <SystemInit+0xf0>)
 8000182:	f240 7105 	movw	r1, #1797	; 0x705
 8000186:	6011      	str	r1, [r2, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000188:	689a      	ldr	r2, [r3, #8]
 800018a:	f022 0203 	bic.w	r2, r2, #3
 800018e:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000190:	689a      	ldr	r2, [r3, #8]
 8000192:	f042 0202 	orr.w	r2, r2, #2
 8000196:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000198:	461a      	mov	r2, r3
 800019a:	6893      	ldr	r3, [r2, #8]
 800019c:	f003 030c 	and.w	r3, r3, #12
 80001a0:	2b08      	cmp	r3, #8
 80001a2:	d1fa      	bne.n	800019a <SystemInit+0xce>
 80001a4:	e7c7      	b.n	8000136 <SystemInit+0x6a>
 80001a6:	bf00      	nop
 80001a8:	40023800 	.word	0x40023800
 80001ac:	24003010 	.word	0x24003010
 80001b0:	e000ed00 	.word	0xe000ed00
 80001b4:	40007000 	.word	0x40007000
 80001b8:	07405419 	.word	0x07405419
 80001bc:	40023c00 	.word	0x40023c00

080001c0 <SystemCoreClockUpdate>:
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80001c0:	4818      	ldr	r0, [pc, #96]	; (8000224 <SystemCoreClockUpdate+0x64>)
 80001c2:	6883      	ldr	r3, [r0, #8]

  switch (tmp)
 80001c4:	f003 030c 	and.w	r3, r3, #12
 80001c8:	2b04      	cmp	r3, #4
 80001ca:	d028      	beq.n	800021e <SystemCoreClockUpdate+0x5e>
 80001cc:	2b08      	cmp	r3, #8
 80001ce:	d009      	beq.n	80001e4 <SystemCoreClockUpdate+0x24>
 80001d0:	4b15      	ldr	r3, [pc, #84]	; (8000228 <SystemCoreClockUpdate+0x68>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80001d2:	4a14      	ldr	r2, [pc, #80]	; (8000224 <SystemCoreClockUpdate+0x64>)
 80001d4:	4915      	ldr	r1, [pc, #84]	; (800022c <SystemCoreClockUpdate+0x6c>)
 80001d6:	6892      	ldr	r2, [r2, #8]
 80001d8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80001dc:	5c8a      	ldrb	r2, [r1, r2]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80001de:	40d3      	lsrs	r3, r2
 80001e0:	610b      	str	r3, [r1, #16]
 80001e2:	4770      	bx	lr
      break;
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80001e4:	6843      	ldr	r3, [r0, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80001e6:	6841      	ldr	r1, [r0, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 80001e8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80001ec:	6843      	ldr	r3, [r0, #4]
 80001ee:	bf18      	it	ne
 80001f0:	480f      	ldrne	r0, [pc, #60]	; (8000230 <SystemCoreClockUpdate+0x70>)
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80001f2:	f001 023f 	and.w	r2, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80001f6:	bf0c      	ite	eq
 80001f8:	490b      	ldreq	r1, [pc, #44]	; (8000228 <SystemCoreClockUpdate+0x68>)
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80001fa:	fbb0 f1f2 	udivne	r1, r0, r2
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80001fe:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000202:	bf08      	it	eq
 8000204:	fbb1 f1f2 	udiveq	r1, r1, r2
 8000208:	fb01 f203 	mul.w	r2, r1, r3
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800020c:	4b05      	ldr	r3, [pc, #20]	; (8000224 <SystemCoreClockUpdate+0x64>)
 800020e:	685b      	ldr	r3, [r3, #4]
      SystemCoreClock = pllvco/pllp;      
 8000210:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000214:	3301      	adds	r3, #1
 8000216:	005b      	lsls	r3, r3, #1
 8000218:	fbb2 f3f3 	udiv	r3, r2, r3
      break;
 800021c:	e7d9      	b.n	80001d2 <SystemCoreClockUpdate+0x12>
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 800021e:	4b04      	ldr	r3, [pc, #16]	; (8000230 <SystemCoreClockUpdate+0x70>)
 8000220:	e7d7      	b.n	80001d2 <SystemCoreClockUpdate+0x12>
 8000222:	bf00      	nop
 8000224:	40023800 	.word	0x40023800
 8000228:	00f42400 	.word	0x00f42400
 800022c:	20000000 	.word	0x20000000
 8000230:	017d7840 	.word	0x017d7840

08000234 <memcpy>:
 8000234:	4684      	mov	ip, r0
 8000236:	ea41 0300 	orr.w	r3, r1, r0
 800023a:	f013 0303 	ands.w	r3, r3, #3
 800023e:	d16d      	bne.n	800031c <memcpy+0xe8>
 8000240:	3a40      	subs	r2, #64	; 0x40
 8000242:	d341      	bcc.n	80002c8 <memcpy+0x94>
 8000244:	f851 3b04 	ldr.w	r3, [r1], #4
 8000248:	f840 3b04 	str.w	r3, [r0], #4
 800024c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000250:	f840 3b04 	str.w	r3, [r0], #4
 8000254:	f851 3b04 	ldr.w	r3, [r1], #4
 8000258:	f840 3b04 	str.w	r3, [r0], #4
 800025c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000260:	f840 3b04 	str.w	r3, [r0], #4
 8000264:	f851 3b04 	ldr.w	r3, [r1], #4
 8000268:	f840 3b04 	str.w	r3, [r0], #4
 800026c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000270:	f840 3b04 	str.w	r3, [r0], #4
 8000274:	f851 3b04 	ldr.w	r3, [r1], #4
 8000278:	f840 3b04 	str.w	r3, [r0], #4
 800027c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000280:	f840 3b04 	str.w	r3, [r0], #4
 8000284:	f851 3b04 	ldr.w	r3, [r1], #4
 8000288:	f840 3b04 	str.w	r3, [r0], #4
 800028c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000290:	f840 3b04 	str.w	r3, [r0], #4
 8000294:	f851 3b04 	ldr.w	r3, [r1], #4
 8000298:	f840 3b04 	str.w	r3, [r0], #4
 800029c:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a0:	f840 3b04 	str.w	r3, [r0], #4
 80002a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a8:	f840 3b04 	str.w	r3, [r0], #4
 80002ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b0:	f840 3b04 	str.w	r3, [r0], #4
 80002b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b8:	f840 3b04 	str.w	r3, [r0], #4
 80002bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c0:	f840 3b04 	str.w	r3, [r0], #4
 80002c4:	3a40      	subs	r2, #64	; 0x40
 80002c6:	d2bd      	bcs.n	8000244 <memcpy+0x10>
 80002c8:	3230      	adds	r2, #48	; 0x30
 80002ca:	d311      	bcc.n	80002f0 <memcpy+0xbc>
 80002cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d0:	f840 3b04 	str.w	r3, [r0], #4
 80002d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d8:	f840 3b04 	str.w	r3, [r0], #4
 80002dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e0:	f840 3b04 	str.w	r3, [r0], #4
 80002e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e8:	f840 3b04 	str.w	r3, [r0], #4
 80002ec:	3a10      	subs	r2, #16
 80002ee:	d2ed      	bcs.n	80002cc <memcpy+0x98>
 80002f0:	320c      	adds	r2, #12
 80002f2:	d305      	bcc.n	8000300 <memcpy+0xcc>
 80002f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f8:	f840 3b04 	str.w	r3, [r0], #4
 80002fc:	3a04      	subs	r2, #4
 80002fe:	d2f9      	bcs.n	80002f4 <memcpy+0xc0>
 8000300:	3204      	adds	r2, #4
 8000302:	d008      	beq.n	8000316 <memcpy+0xe2>
 8000304:	07d2      	lsls	r2, r2, #31
 8000306:	bf1c      	itt	ne
 8000308:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800030c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000310:	d301      	bcc.n	8000316 <memcpy+0xe2>
 8000312:	880b      	ldrh	r3, [r1, #0]
 8000314:	8003      	strh	r3, [r0, #0]
 8000316:	4660      	mov	r0, ip
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	2a08      	cmp	r2, #8
 800031e:	d313      	bcc.n	8000348 <memcpy+0x114>
 8000320:	078b      	lsls	r3, r1, #30
 8000322:	d08d      	beq.n	8000240 <memcpy+0xc>
 8000324:	f010 0303 	ands.w	r3, r0, #3
 8000328:	d08a      	beq.n	8000240 <memcpy+0xc>
 800032a:	f1c3 0304 	rsb	r3, r3, #4
 800032e:	1ad2      	subs	r2, r2, r3
 8000330:	07db      	lsls	r3, r3, #31
 8000332:	bf1c      	itt	ne
 8000334:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000338:	f800 3b01 	strbne.w	r3, [r0], #1
 800033c:	d380      	bcc.n	8000240 <memcpy+0xc>
 800033e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000342:	f820 3b02 	strh.w	r3, [r0], #2
 8000346:	e77b      	b.n	8000240 <memcpy+0xc>
 8000348:	3a04      	subs	r2, #4
 800034a:	d3d9      	bcc.n	8000300 <memcpy+0xcc>
 800034c:	3a01      	subs	r2, #1
 800034e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000352:	f800 3b01 	strb.w	r3, [r0], #1
 8000356:	d2f9      	bcs.n	800034c <memcpy+0x118>
 8000358:	780b      	ldrb	r3, [r1, #0]
 800035a:	7003      	strb	r3, [r0, #0]
 800035c:	784b      	ldrb	r3, [r1, #1]
 800035e:	7043      	strb	r3, [r0, #1]
 8000360:	788b      	ldrb	r3, [r1, #2]
 8000362:	7083      	strb	r3, [r0, #2]
 8000364:	4660      	mov	r0, ip
 8000366:	4770      	bx	lr

08000368 <main>:

int main(void)
{

  return 0;
}
 8000368:	2000      	movs	r0, #0
 800036a:	4770      	bx	lr

0800036c <memset>:
 800036c:	b470      	push	{r4, r5, r6}
 800036e:	0784      	lsls	r4, r0, #30
 8000370:	d046      	beq.n	8000400 <memset+0x94>
 8000372:	1e54      	subs	r4, r2, #1
 8000374:	2a00      	cmp	r2, #0
 8000376:	d041      	beq.n	80003fc <memset+0x90>
 8000378:	b2cd      	uxtb	r5, r1
 800037a:	4603      	mov	r3, r0
 800037c:	e002      	b.n	8000384 <memset+0x18>
 800037e:	1e62      	subs	r2, r4, #1
 8000380:	b3e4      	cbz	r4, 80003fc <memset+0x90>
 8000382:	4614      	mov	r4, r2
 8000384:	f803 5b01 	strb.w	r5, [r3], #1
 8000388:	079a      	lsls	r2, r3, #30
 800038a:	d1f8      	bne.n	800037e <memset+0x12>
 800038c:	2c03      	cmp	r4, #3
 800038e:	d92e      	bls.n	80003ee <memset+0x82>
 8000390:	b2cd      	uxtb	r5, r1
 8000392:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000396:	2c0f      	cmp	r4, #15
 8000398:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800039c:	d919      	bls.n	80003d2 <memset+0x66>
 800039e:	f103 0210 	add.w	r2, r3, #16
 80003a2:	4626      	mov	r6, r4
 80003a4:	3e10      	subs	r6, #16
 80003a6:	2e0f      	cmp	r6, #15
 80003a8:	f842 5c10 	str.w	r5, [r2, #-16]
 80003ac:	f842 5c0c 	str.w	r5, [r2, #-12]
 80003b0:	f842 5c08 	str.w	r5, [r2, #-8]
 80003b4:	f842 5c04 	str.w	r5, [r2, #-4]
 80003b8:	f102 0210 	add.w	r2, r2, #16
 80003bc:	d8f2      	bhi.n	80003a4 <memset+0x38>
 80003be:	f1a4 0210 	sub.w	r2, r4, #16
 80003c2:	f022 020f 	bic.w	r2, r2, #15
 80003c6:	f004 040f 	and.w	r4, r4, #15
 80003ca:	3210      	adds	r2, #16
 80003cc:	2c03      	cmp	r4, #3
 80003ce:	4413      	add	r3, r2
 80003d0:	d90d      	bls.n	80003ee <memset+0x82>
 80003d2:	461e      	mov	r6, r3
 80003d4:	4622      	mov	r2, r4
 80003d6:	3a04      	subs	r2, #4
 80003d8:	2a03      	cmp	r2, #3
 80003da:	f846 5b04 	str.w	r5, [r6], #4
 80003de:	d8fa      	bhi.n	80003d6 <memset+0x6a>
 80003e0:	1f22      	subs	r2, r4, #4
 80003e2:	f022 0203 	bic.w	r2, r2, #3
 80003e6:	3204      	adds	r2, #4
 80003e8:	4413      	add	r3, r2
 80003ea:	f004 0403 	and.w	r4, r4, #3
 80003ee:	b12c      	cbz	r4, 80003fc <memset+0x90>
 80003f0:	b2c9      	uxtb	r1, r1
 80003f2:	441c      	add	r4, r3
 80003f4:	f803 1b01 	strb.w	r1, [r3], #1
 80003f8:	42a3      	cmp	r3, r4
 80003fa:	d1fb      	bne.n	80003f4 <memset+0x88>
 80003fc:	bc70      	pop	{r4, r5, r6}
 80003fe:	4770      	bx	lr
 8000400:	4614      	mov	r4, r2
 8000402:	4603      	mov	r3, r0
 8000404:	e7c2      	b.n	800038c <memset+0x20>
 8000406:	bf00      	nop
