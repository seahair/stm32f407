
main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <Default_Handler>:
#pragma weak DMA2_Channel2_IRQHandler	= Default_Handler
#pragma weak DMA2_Channel3_IRQHandler	= Default_Handler
#pragma weak DMA2_Channel4_5_IRQHandler	= Default_Handler

void Default_Handler(void)
{
 8000000:	e7fe      	b.n	8000000 <Default_Handler>
 8000002:	bf00      	nop

08000004 <Reset_Handler>:
	/* zero the bss segment */
	dst = &_sbss;
	while(dst < &_ebss)
		*(dst++) = 0;
}
void Reset_Handler(void) {
 8000004:	4668      	mov	r0, sp
 8000006:	f020 0107 	bic.w	r1, r0, #7
 800000a:	468d      	mov	sp, r1
void __Init_Data(void) {
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
 800000c:	480f      	ldr	r0, [pc, #60]	; (800004c <Reset_Handler+0x48>)
 800000e:	4910      	ldr	r1, [pc, #64]	; (8000050 <Reset_Handler+0x4c>)
 8000010:	4281      	cmp	r1, r0
	/* zero the bss segment */
	dst = &_sbss;
	while(dst < &_ebss)
		*(dst++) = 0;
}
void Reset_Handler(void) {
 8000012:	b508      	push	{r3, lr}
void __Init_Data(void) {
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
 8000014:	d009      	beq.n	800002a <Reset_Handler+0x26>
		while(dst < &_edata)
 8000016:	4b0f      	ldr	r3, [pc, #60]	; (8000054 <Reset_Handler+0x50>)
 8000018:	4298      	cmp	r0, r3
 800001a:	d206      	bcs.n	800002a <Reset_Handler+0x26>
 800001c:	43c2      	mvns	r2, r0
 800001e:	4413      	add	r3, r2
 8000020:	f023 0203 	bic.w	r2, r3, #3
 8000024:	3204      	adds	r2, #4
 8000026:	f000 fedd 	bl	8000de4 <memcpy>
			*(dst++) = *(src++);
	/* zero the bss segment */
	dst = &_sbss;
	while(dst < &_ebss)
 800002a:	480b      	ldr	r0, [pc, #44]	; (8000058 <Reset_Handler+0x54>)
 800002c:	4b0b      	ldr	r3, [pc, #44]	; (800005c <Reset_Handler+0x58>)
 800002e:	4298      	cmp	r0, r3
 8000030:	d207      	bcs.n	8000042 <Reset_Handler+0x3e>
 8000032:	43c2      	mvns	r2, r0
 8000034:	4413      	add	r3, r2
 8000036:	f023 0203 	bic.w	r2, r3, #3
 800003a:	3204      	adds	r2, #4
 800003c:	2100      	movs	r1, #0
 800003e:	f000 ffbb 	bl	8000fb8 <memset>
}
void Reset_Handler(void) {
	__Init_Data(); /* Initialize memory, data and bss */
//	extern u32 _isr_vectors_offs; /* the offset to the vector table in ram */
//	SCB->VTOR = 0x08000000 | ((u32)&_isr_vectors_offs & (u32)0x1FFFFF80); /* set interrupt vector table address */
	SystemInit(); /* configure the clock */
 8000042:	f000 f835 	bl	80000b0 <SystemInit>
	main(); /* start execution of the program */
 8000046:	f000 ff67 	bl	8000f18 <main>
 800004a:	e7fe      	b.n	800004a <Reset_Handler+0x46>
 800004c:	20000000 	.word	0x20000000
 8000050:	08001054 	.word	0x08001054
 8000054:	20000024 	.word	0x20000024
 8000058:	20000024 	.word	0x20000024
 800005c:	20000024 	.word	0x20000024

08000060 <__Init_Data>:
void __Init_Data(void) {
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
 8000060:	490e      	ldr	r1, [pc, #56]	; (800009c <__Init_Data+0x3c>)
 8000062:	480f      	ldr	r0, [pc, #60]	; (80000a0 <__Init_Data+0x40>)
 8000064:	4281      	cmp	r1, r0
 0, 0, 0, 0, 0,
 0, 0, 0,
 (intfunc)0xF1E0F85F
/* @0x1E0. This is for boot in RAM mode for STM32F10x High Density devices. */
};
void __Init_Data(void) {
 8000066:	b508      	push	{r3, lr}
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
 8000068:	d009      	beq.n	800007e <__Init_Data+0x1e>
		while(dst < &_edata)
 800006a:	4b0e      	ldr	r3, [pc, #56]	; (80000a4 <__Init_Data+0x44>)
 800006c:	4298      	cmp	r0, r3
 800006e:	d206      	bcs.n	800007e <__Init_Data+0x1e>
 8000070:	43c2      	mvns	r2, r0
 8000072:	441a      	add	r2, r3
 8000074:	f022 0203 	bic.w	r2, r2, #3
 8000078:	3204      	adds	r2, #4
 800007a:	f000 feb3 	bl	8000de4 <memcpy>
			*(dst++) = *(src++);
	/* zero the bss segment */
	dst = &_sbss;
	while(dst < &_ebss)
 800007e:	480a      	ldr	r0, [pc, #40]	; (80000a8 <__Init_Data+0x48>)
 8000080:	4b0a      	ldr	r3, [pc, #40]	; (80000ac <__Init_Data+0x4c>)
 8000082:	4298      	cmp	r0, r3
 8000084:	d209      	bcs.n	800009a <__Init_Data+0x3a>
 8000086:	43c2      	mvns	r2, r0
 8000088:	441a      	add	r2, r3
 800008a:	f022 0203 	bic.w	r2, r2, #3
 800008e:	3204      	adds	r2, #4
 8000090:	2100      	movs	r1, #0
		*(dst++) = 0;
}
 8000092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000096:	f000 bf8f 	b.w	8000fb8 <memset>
 800009a:	bd08      	pop	{r3, pc}
 800009c:	08001054 	.word	0x08001054
 80000a0:	20000000 	.word	0x20000000
 80000a4:	20000024 	.word	0x20000024
 80000a8:	20000024 	.word	0x20000024
 80000ac:	20000024 	.word	0x20000024

080000b0 <SystemInit>:
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80000b0:	4b36      	ldr	r3, [pc, #216]	; (800018c <SystemInit+0xdc>)

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80000b2:	4837      	ldr	r0, [pc, #220]	; (8000190 <SystemInit+0xe0>)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80000b4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80000b6:	2100      	movs	r1, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80000b8:	f042 0201 	orr.w	r2, r2, #1
 80000bc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80000be:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80000c0:	681a      	ldr	r2, [r3, #0]
 80000c2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80000c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80000ca:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80000cc:	6058      	str	r0, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80000ce:	681a      	ldr	r2, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80000d0:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80000d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80000d6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80000d8:	60d9      	str	r1, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80000da:	9100      	str	r1, [sp, #0]
 80000dc:	9101      	str	r1, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80000de:	681a      	ldr	r2, [r3, #0]
 80000e0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80000e4:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80000e6:	461a      	mov	r2, r3
 80000e8:	e003      	b.n	80000f2 <SystemInit+0x42>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80000ea:	9b00      	ldr	r3, [sp, #0]
 80000ec:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80000f0:	d009      	beq.n	8000106 <SystemInit+0x56>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80000f2:	6813      	ldr	r3, [r2, #0]
 80000f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80000f8:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 80000fa:	9b00      	ldr	r3, [sp, #0]
 80000fc:	3301      	adds	r3, #1
 80000fe:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000100:	9b01      	ldr	r3, [sp, #4]
 8000102:	2b00      	cmp	r3, #0
 8000104:	d0f1      	beq.n	80000ea <SystemInit+0x3a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000106:	4b21      	ldr	r3, [pc, #132]	; (800018c <SystemInit+0xdc>)
 8000108:	681b      	ldr	r3, [r3, #0]
 800010a:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 800010e:	bf18      	it	ne
 8000110:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000112:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000114:	9b01      	ldr	r3, [sp, #4]
 8000116:	2b01      	cmp	r3, #1
 8000118:	d005      	beq.n	8000126 <SystemInit+0x76>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800011a:	4b1e      	ldr	r3, [pc, #120]	; (8000194 <SystemInit+0xe4>)
 800011c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000120:	609a      	str	r2, [r3, #8]
#endif
}
 8000122:	b002      	add	sp, #8
 8000124:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000126:	4b19      	ldr	r3, [pc, #100]	; (800018c <SystemInit+0xdc>)
    PWR->CR |= PWR_CR_VOS;
 8000128:	491b      	ldr	r1, [pc, #108]	; (8000198 <SystemInit+0xe8>)
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800012a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800012c:	481b      	ldr	r0, [pc, #108]	; (800019c <SystemInit+0xec>)
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800012e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000132:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000134:	680a      	ldr	r2, [r1, #0]
 8000136:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800013a:	600a      	str	r2, [r1, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800013c:	689a      	ldr	r2, [r3, #8]
 800013e:	609a      	str	r2, [r3, #8]

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000140:	689a      	ldr	r2, [r3, #8]
 8000142:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000146:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000148:	689a      	ldr	r2, [r3, #8]
 800014a:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800014e:	609a      	str	r2, [r3, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000150:	6058      	str	r0, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000152:	681a      	ldr	r2, [r3, #0]
 8000154:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000158:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800015a:	461a      	mov	r2, r3
 800015c:	6811      	ldr	r1, [r2, #0]
 800015e:	4b0b      	ldr	r3, [pc, #44]	; (800018c <SystemInit+0xdc>)
 8000160:	0189      	lsls	r1, r1, #6
 8000162:	d5fb      	bpl.n	800015c <SystemInit+0xac>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx  */

#if defined (STM32F40_41xxx)     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000164:	4a0e      	ldr	r2, [pc, #56]	; (80001a0 <SystemInit+0xf0>)
 8000166:	f240 7105 	movw	r1, #1797	; 0x705
 800016a:	6011      	str	r1, [r2, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800016c:	689a      	ldr	r2, [r3, #8]
 800016e:	f022 0203 	bic.w	r2, r2, #3
 8000172:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000174:	689a      	ldr	r2, [r3, #8]
 8000176:	f042 0202 	orr.w	r2, r2, #2
 800017a:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800017c:	461a      	mov	r2, r3
 800017e:	6893      	ldr	r3, [r2, #8]
 8000180:	f003 030c 	and.w	r3, r3, #12
 8000184:	2b08      	cmp	r3, #8
 8000186:	d1fa      	bne.n	800017e <SystemInit+0xce>
 8000188:	e7c7      	b.n	800011a <SystemInit+0x6a>
 800018a:	bf00      	nop
 800018c:	40023800 	.word	0x40023800
 8000190:	24003010 	.word	0x24003010
 8000194:	e000ed00 	.word	0xe000ed00
 8000198:	40007000 	.word	0x40007000
 800019c:	07405419 	.word	0x07405419
 80001a0:	40023c00 	.word	0x40023c00

080001a4 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80001a4:	4818      	ldr	r0, [pc, #96]	; (8000208 <SystemCoreClockUpdate+0x64>)
 80001a6:	6883      	ldr	r3, [r0, #8]

  switch (tmp)
 80001a8:	f003 030c 	and.w	r3, r3, #12
 80001ac:	2b04      	cmp	r3, #4
 80001ae:	d028      	beq.n	8000202 <SystemCoreClockUpdate+0x5e>
 80001b0:	2b08      	cmp	r3, #8
 80001b2:	d009      	beq.n	80001c8 <SystemCoreClockUpdate+0x24>
 80001b4:	4b15      	ldr	r3, [pc, #84]	; (800020c <SystemCoreClockUpdate+0x68>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80001b6:	4a14      	ldr	r2, [pc, #80]	; (8000208 <SystemCoreClockUpdate+0x64>)
 80001b8:	4915      	ldr	r1, [pc, #84]	; (8000210 <SystemCoreClockUpdate+0x6c>)
 80001ba:	6892      	ldr	r2, [r2, #8]
 80001bc:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80001c0:	5c8a      	ldrb	r2, [r1, r2]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80001c2:	40d3      	lsrs	r3, r2
 80001c4:	610b      	str	r3, [r1, #16]
 80001c6:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80001c8:	6843      	ldr	r3, [r0, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80001ca:	6841      	ldr	r1, [r0, #4]
      
      if (pllsource != 0)
 80001cc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80001d0:	6843      	ldr	r3, [r0, #4]
 80001d2:	bf18      	it	ne
 80001d4:	480f      	ldrne	r0, [pc, #60]	; (8000214 <SystemCoreClockUpdate+0x70>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80001d6:	f001 023f 	and.w	r2, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80001da:	bf0c      	ite	eq
 80001dc:	490b      	ldreq	r1, [pc, #44]	; (800020c <SystemCoreClockUpdate+0x68>)
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80001de:	fbb0 f1f2 	udivne	r1, r0, r2
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80001e2:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80001e6:	bf08      	it	eq
 80001e8:	fbb1 f1f2 	udiveq	r1, r1, r2
 80001ec:	fb01 f203 	mul.w	r2, r1, r3
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80001f0:	4b05      	ldr	r3, [pc, #20]	; (8000208 <SystemCoreClockUpdate+0x64>)
 80001f2:	685b      	ldr	r3, [r3, #4]
      SystemCoreClock = pllvco/pllp;
 80001f4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80001f8:	3301      	adds	r3, #1
 80001fa:	005b      	lsls	r3, r3, #1
 80001fc:	fbb2 f3f3 	udiv	r3, r2, r3
      break;
 8000200:	e7d9      	b.n	80001b6 <SystemCoreClockUpdate+0x12>
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 8000202:	4b04      	ldr	r3, [pc, #16]	; (8000214 <SystemCoreClockUpdate+0x70>)
 8000204:	e7d7      	b.n	80001b6 <SystemCoreClockUpdate+0x12>
 8000206:	bf00      	nop
 8000208:	40023800 	.word	0x40023800
 800020c:	00f42400 	.word	0x00f42400
 8000210:	20000000 	.word	0x20000000
 8000214:	017d7840 	.word	0x017d7840

08000218 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000218:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 800021a:	4b4b      	ldr	r3, [pc, #300]	; (8000348 <GPIO_DeInit+0x130>)
 800021c:	4298      	cmp	r0, r3
 800021e:	d02a      	beq.n	8000276 <GPIO_DeInit+0x5e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 8000220:	4b4a      	ldr	r3, [pc, #296]	; (800034c <GPIO_DeInit+0x134>)
 8000222:	4298      	cmp	r0, r3
 8000224:	d031      	beq.n	800028a <GPIO_DeInit+0x72>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 8000226:	4b4a      	ldr	r3, [pc, #296]	; (8000350 <GPIO_DeInit+0x138>)
 8000228:	4298      	cmp	r0, r3
 800022a:	d038      	beq.n	800029e <GPIO_DeInit+0x86>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 800022c:	4b49      	ldr	r3, [pc, #292]	; (8000354 <GPIO_DeInit+0x13c>)
 800022e:	4298      	cmp	r0, r3
 8000230:	d03f      	beq.n	80002b2 <GPIO_DeInit+0x9a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 8000232:	4b49      	ldr	r3, [pc, #292]	; (8000358 <GPIO_DeInit+0x140>)
 8000234:	4298      	cmp	r0, r3
 8000236:	d046      	beq.n	80002c6 <GPIO_DeInit+0xae>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 8000238:	4b48      	ldr	r3, [pc, #288]	; (800035c <GPIO_DeInit+0x144>)
 800023a:	4298      	cmp	r0, r3
 800023c:	d04d      	beq.n	80002da <GPIO_DeInit+0xc2>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 800023e:	4b48      	ldr	r3, [pc, #288]	; (8000360 <GPIO_DeInit+0x148>)
 8000240:	4298      	cmp	r0, r3
 8000242:	d054      	beq.n	80002ee <GPIO_DeInit+0xd6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 8000244:	4b47      	ldr	r3, [pc, #284]	; (8000364 <GPIO_DeInit+0x14c>)
 8000246:	4298      	cmp	r0, r3
 8000248:	d05b      	beq.n	8000302 <GPIO_DeInit+0xea>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }

  else if (GPIOx == GPIOI)
 800024a:	4b47      	ldr	r3, [pc, #284]	; (8000368 <GPIO_DeInit+0x150>)
 800024c:	4298      	cmp	r0, r3
 800024e:	d062      	beq.n	8000316 <GPIO_DeInit+0xfe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
  }
  else if (GPIOx == GPIOJ)
 8000250:	4b46      	ldr	r3, [pc, #280]	; (800036c <GPIO_DeInit+0x154>)
 8000252:	4298      	cmp	r0, r3
 8000254:	d06b      	beq.n	800032e <GPIO_DeInit+0x116>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOK)
 8000256:	4b46      	ldr	r3, [pc, #280]	; (8000370 <GPIO_DeInit+0x158>)
 8000258:	4298      	cmp	r0, r3
 800025a:	d000      	beq.n	800025e <GPIO_DeInit+0x46>
 800025c:	bd08      	pop	{r3, pc}
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
 800025e:	2101      	movs	r1, #1
 8000260:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000264:	f000 fb20 	bl	80008a8 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 8000268:	2100      	movs	r1, #0
 800026a:	f44f 6080 	mov.w	r0, #1024	; 0x400
    }
  }
}
 800026e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOK)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 8000272:	f000 bb19 	b.w	80008a8 <RCC_AHB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000276:	2101      	movs	r1, #1
 8000278:	4608      	mov	r0, r1
 800027a:	f000 fb15 	bl	80008a8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 800027e:	2100      	movs	r1, #0
 8000280:	2001      	movs	r0, #1
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000282:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8000286:	f000 bb0f 	b.w	80008a8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800028a:	2101      	movs	r1, #1
 800028c:	2002      	movs	r0, #2
 800028e:	f000 fb0b 	bl	80008a8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8000292:	2100      	movs	r1, #0
 8000294:	2002      	movs	r0, #2
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000296:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800029a:	f000 bb05 	b.w	80008a8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800029e:	2101      	movs	r1, #1
 80002a0:	2004      	movs	r0, #4
 80002a2:	f000 fb01 	bl	80008a8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80002a6:	2100      	movs	r1, #0
 80002a8:	2004      	movs	r0, #4
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80002aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80002ae:	f000 bafb 	b.w	80008a8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80002b2:	2101      	movs	r1, #1
 80002b4:	2008      	movs	r0, #8
 80002b6:	f000 faf7 	bl	80008a8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80002ba:	2100      	movs	r1, #0
 80002bc:	2008      	movs	r0, #8
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80002be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80002c2:	f000 baf1 	b.w	80008a8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80002c6:	2101      	movs	r1, #1
 80002c8:	2010      	movs	r0, #16
 80002ca:	f000 faed 	bl	80008a8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80002ce:	2100      	movs	r1, #0
 80002d0:	2010      	movs	r0, #16
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80002d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80002d6:	f000 bae7 	b.w	80008a8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 80002da:	2101      	movs	r1, #1
 80002dc:	2020      	movs	r0, #32
 80002de:	f000 fae3 	bl	80008a8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 80002e2:	2100      	movs	r1, #0
 80002e4:	2020      	movs	r0, #32
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80002e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 80002ea:	f000 badd 	b.w	80008a8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80002ee:	2101      	movs	r1, #1
 80002f0:	2040      	movs	r0, #64	; 0x40
 80002f2:	f000 fad9 	bl	80008a8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 80002f6:	2100      	movs	r1, #0
 80002f8:	2040      	movs	r0, #64	; 0x40
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80002fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 80002fe:	f000 bad3 	b.w	80008a8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8000302:	2101      	movs	r1, #1
 8000304:	2080      	movs	r0, #128	; 0x80
 8000306:	f000 facf 	bl	80008a8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800030a:	2100      	movs	r1, #0
 800030c:	2080      	movs	r0, #128	; 0x80
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800030e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8000312:	f000 bac9 	b.w	80008a8 <RCC_AHB1PeriphResetCmd>
  }

  else if (GPIOx == GPIOI)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8000316:	2101      	movs	r1, #1
 8000318:	f44f 7080 	mov.w	r0, #256	; 0x100
 800031c:	f000 fac4 	bl	80008a8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000320:	2100      	movs	r1, #0
 8000322:	f44f 7080 	mov.w	r0, #256	; 0x100
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000326:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  }

  else if (GPIOx == GPIOI)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 800032a:	f000 babd 	b.w	80008a8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOJ)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
 800032e:	2101      	movs	r1, #1
 8000330:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000334:	f000 fab8 	bl	80008a8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 8000338:	2100      	movs	r1, #0
 800033a:	f44f 7000 	mov.w	r0, #512	; 0x200
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800033e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
  }
  else if (GPIOx == GPIOJ)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 8000342:	f000 bab1 	b.w	80008a8 <RCC_AHB1PeriphResetCmd>
 8000346:	bf00      	nop
 8000348:	40020000 	.word	0x40020000
 800034c:	40020400 	.word	0x40020400
 8000350:	40020800 	.word	0x40020800
 8000354:	40020c00 	.word	0x40020c00
 8000358:	40021000 	.word	0x40021000
 800035c:	40021400 	.word	0x40021400
 8000360:	40021800 	.word	0x40021800
 8000364:	40021c00 	.word	0x40021c00
 8000368:	40022000 	.word	0x40022000
 800036c:	40022400 	.word	0x40022400
 8000370:	40022800 	.word	0x40022800

08000374 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000374:	2200      	movs	r2, #0
 8000376:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800037a:	4613      	mov	r3, r2
 800037c:	f8d1 e000 	ldr.w	lr, [r1]
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000380:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000382:	f04f 0c03 	mov.w	ip, #3
 8000386:	e004      	b.n	8000392 <GPIO_Init+0x1e>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000388:	3301      	adds	r3, #1
 800038a:	2b10      	cmp	r3, #16
 800038c:	f102 0202 	add.w	r2, r2, #2
 8000390:	d029      	beq.n	80003e6 <GPIO_Init+0x72>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000392:	fa07 f403 	lsl.w	r4, r7, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 8000396:	ea34 050e 	bics.w	r5, r4, lr
 800039a:	d1f5      	bne.n	8000388 <GPIO_Init+0x14>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800039c:	f8d0 8000 	ldr.w	r8, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80003a0:	790e      	ldrb	r6, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80003a2:	fa0c f502 	lsl.w	r5, ip, r2
 80003a6:	43ed      	mvns	r5, r5
 80003a8:	ea08 0805 	and.w	r8, r8, r5
 80003ac:	f8c0 8000 	str.w	r8, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80003b0:	f8d0 9000 	ldr.w	r9, [r0]
 80003b4:	fa06 fa02 	lsl.w	sl, r6, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80003b8:	3e01      	subs	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80003ba:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80003be:	2e01      	cmp	r6, #1
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80003c0:	fa0c f802 	lsl.w	r8, ip, r2
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80003c4:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80003c8:	d90f      	bls.n	80003ea <GPIO_Init+0x76>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80003ca:	68c5      	ldr	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80003cc:	79cc      	ldrb	r4, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80003ce:	ea25 0508 	bic.w	r5, r5, r8
 80003d2:	60c5      	str	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80003d4:	68c5      	ldr	r5, [r0, #12]
 80003d6:	4094      	lsls	r4, r2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003d8:	3301      	adds	r3, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80003da:	432c      	orrs	r4, r5
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003dc:	2b10      	cmp	r3, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80003de:	60c4      	str	r4, [r0, #12]
 80003e0:	f102 0202 	add.w	r2, r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003e4:	d1d5      	bne.n	8000392 <GPIO_Init+0x1e>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80003ea:	6886      	ldr	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80003ec:	f891 9005 	ldrb.w	r9, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80003f0:	4035      	ands	r5, r6
 80003f2:	6085      	str	r5, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80003f4:	6886      	ldr	r6, [r0, #8]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80003f6:	798d      	ldrb	r5, [r1, #6]
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80003f8:	fa09 f902 	lsl.w	r9, r9, r2
 80003fc:	ea49 0606 	orr.w	r6, r9, r6
 8000400:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000402:	6846      	ldr	r6, [r0, #4]
 8000404:	ea26 0404 	bic.w	r4, r6, r4
 8000408:	6044      	str	r4, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800040a:	6846      	ldr	r6, [r0, #4]
 800040c:	fa05 f403 	lsl.w	r4, r5, r3
 8000410:	b2a4      	uxth	r4, r4
 8000412:	4334      	orrs	r4, r6
 8000414:	6044      	str	r4, [r0, #4]
 8000416:	e7d8      	b.n	80003ca <GPIO_Init+0x56>

08000418 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000418:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800041a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800041e:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000420:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000422:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000424:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000426:	71c3      	strb	r3, [r0, #7]
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop

0800042c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800042c:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 800042e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000432:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	430b      	orrs	r3, r1
 8000438:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800043a:	9b01      	ldr	r3, [sp, #4]
 800043c:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800043e:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000440:	9b01      	ldr	r3, [sp, #4]
 8000442:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000444:	69c3      	ldr	r3, [r0, #28]
 8000446:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000448:	69c3      	ldr	r3, [r0, #28]
 800044a:	9301      	str	r3, [sp, #4]
}
 800044c:	b002      	add	sp, #8
 800044e:	4770      	bx	lr

08000450 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000450:	6903      	ldr	r3, [r0, #16]
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8000452:	4219      	tst	r1, r3
}
 8000454:	bf14      	ite	ne
 8000456:	2001      	movne	r0, #1
 8000458:	2000      	moveq	r0, #0
 800045a:	4770      	bx	lr

0800045c <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 800045c:	6900      	ldr	r0, [r0, #16]
}
 800045e:	b280      	uxth	r0, r0
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop

08000464 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000464:	6943      	ldr	r3, [r0, #20]
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8000466:	4219      	tst	r1, r3
}
 8000468:	bf14      	ite	ne
 800046a:	2001      	movne	r0, #1
 800046c:	2000      	moveq	r0, #0
 800046e:	4770      	bx	lr

08000470 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8000470:	6940      	ldr	r0, [r0, #20]
}
 8000472:	b280      	uxth	r0, r0
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000478:	8301      	strh	r1, [r0, #24]
 800047a:	4770      	bx	lr

0800047c <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800047c:	8341      	strh	r1, [r0, #26]
 800047e:	4770      	bx	lr

08000480 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000480:	b90a      	cbnz	r2, 8000486 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8000482:	8341      	strh	r1, [r0, #26]
 8000484:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000486:	8301      	strh	r1, [r0, #24]
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop

0800048c <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 800048c:	6141      	str	r1, [r0, #20]
 800048e:	4770      	bx	lr

08000490 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000490:	6943      	ldr	r3, [r0, #20]
 8000492:	4059      	eors	r1, r3
 8000494:	6141      	str	r1, [r0, #20]
 8000496:	4770      	bx	lr

08000498 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000498:	08cb      	lsrs	r3, r1, #3
 800049a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800049e:	f001 0107 	and.w	r1, r1, #7
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80004a2:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80004a4:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80004a6:	6a04      	ldr	r4, [r0, #32]
 80004a8:	230f      	movs	r3, #15
 80004aa:	408b      	lsls	r3, r1
 80004ac:	ea24 0303 	bic.w	r3, r4, r3
 80004b0:	6203      	str	r3, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80004b2:	6a03      	ldr	r3, [r0, #32]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 80004b4:	bc10      	pop	{r4}
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80004b6:	408a      	lsls	r2, r1
 80004b8:	ea42 0103 	orr.w	r1, r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80004bc:	6201      	str	r1, [r0, #32]
}
 80004be:	4770      	bx	lr

080004c0 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004c0:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <RCC_DeInit+0x40>)
  RCC->PLLI2SCFGR = 0x20003000;
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 80004c2:	4810      	ldr	r0, [pc, #64]	; (8000504 <RCC_DeInit+0x44>)
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004c4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004c6:	2100      	movs	r1, #0
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004c8:	f042 0201 	orr.w	r2, r2, #1
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80004cc:	b430      	push	{r4, r5}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004ce:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004d0:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80004d2:	681a      	ldr	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80004d4:	4d0c      	ldr	r5, [pc, #48]	; (8000508 <RCC_DeInit+0x48>)

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80004d6:	4c0d      	ldr	r4, [pc, #52]	; (800050c <RCC_DeInit+0x4c>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80004d8:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80004dc:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80004e0:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80004e2:	605d      	str	r5, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80004e4:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 80004e8:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80004f2:	601a      	str	r2, [r3, #0]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 80004f4:	bc30      	pop	{r4, r5}
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80004f6:	60d9      	str	r1, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 80004f8:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40023800 	.word	0x40023800
 8000504:	24003000 	.word	0x24003000
 8000508:	24003010 	.word	0x24003010
 800050c:	20003000 	.word	0x20003000

08000510 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8000510:	4b02      	ldr	r3, [pc, #8]	; (800051c <RCC_HSEConfig+0xc>)
 8000512:	2200      	movs	r2, #0
 8000514:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8000516:	7018      	strb	r0, [r3, #0]
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	40023802 	.word	0x40023802

08000520 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000520:	b082      	sub	sp, #8
  __IO uint32_t startupcounter = 0;
 8000522:	2300      	movs	r3, #0

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000524:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <RCC_WaitForHSEStartUp+0x30>)
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t startupcounter = 0;
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	e002      	b.n	8000530 <RCC_WaitForHSEStartUp+0x10>
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800052a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800052e:	d008      	beq.n	8000542 <RCC_WaitForHSEStartUp+0x22>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000530:	6813      	ldr	r3, [r2, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000532:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 8000536:	9b01      	ldr	r3, [sp, #4]
 8000538:	f103 0301 	add.w	r3, r3, #1
 800053c:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800053e:	9b01      	ldr	r3, [sp, #4]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000540:	d0f3      	beq.n	800052a <RCC_WaitForHSEStartUp+0xa>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000542:	4b03      	ldr	r3, [pc, #12]	; (8000550 <RCC_WaitForHSEStartUp+0x30>)
 8000544:	6818      	ldr	r0, [r3, #0]
  }
  else
  {
    status = ERROR;
  }
  return (status);
 8000546:	f3c0 4040 	ubfx	r0, r0, #17, #1
}
 800054a:	b002      	add	sp, #8
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40023800 	.word	0x40023800

08000554 <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <RCC_AdjustHSICalibrationValue+0x10>)
 8000556:	6813      	ldr	r3, [r2, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8000558:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 800055c:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8000560:	6010      	str	r0, [r2, #0]
 8000562:	4770      	bx	lr
 8000564:	40023800 	.word	0x40023800

08000568 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000568:	4b01      	ldr	r3, [pc, #4]	; (8000570 <RCC_HSICmd+0x8>)
 800056a:	6018      	str	r0, [r3, #0]
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	42470000 	.word	0x42470000

08000574 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <RCC_LSEConfig+0x1c>)
 8000576:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8000578:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800057a:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800057c:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 800057e:	d005      	beq.n	800058c <RCC_LSEConfig+0x18>
 8000580:	2804      	cmp	r0, #4
 8000582:	d102      	bne.n	800058a <RCC_LSEConfig+0x16>
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000584:	2205      	movs	r2, #5
 8000586:	701a      	strb	r2, [r3, #0]
 8000588:	4770      	bx	lr
 800058a:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800058c:	7018      	strb	r0, [r3, #0]
      break;
 800058e:	4770      	bx	lr
 8000590:	40023870 	.word	0x40023870

08000594 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8000594:	4b01      	ldr	r3, [pc, #4]	; (800059c <RCC_LSICmd+0x8>)
 8000596:	6018      	str	r0, [r3, #0]
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	42470e80 	.word	0x42470e80

080005a0 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 80005a0:	b430      	push	{r4, r5}
 80005a2:	9c02      	ldr	r4, [sp, #8]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80005a4:	4d06      	ldr	r5, [pc, #24]	; (80005c0 <RCC_PLLConfig+0x20>)
 80005a6:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 80005aa:	4301      	orrs	r1, r0
 80005ac:	085b      	lsrs	r3, r3, #1
 80005ae:	3b01      	subs	r3, #1
 80005b0:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 80005b4:	ea42 4003 	orr.w	r0, r2, r3, lsl #16
 80005b8:	6068      	str	r0, [r5, #4]
                 (PLLQ << 24);
}
 80005ba:	bc30      	pop	{r4, r5}
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40023800 	.word	0x40023800

080005c4 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80005c4:	4b01      	ldr	r3, [pc, #4]	; (80005cc <RCC_PLLCmd+0x8>)
 80005c6:	6018      	str	r0, [r3, #0]
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	42470060 	.word	0x42470060

080005d0 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 80005d0:	0709      	lsls	r1, r1, #28
 80005d2:	4b03      	ldr	r3, [pc, #12]	; (80005e0 <RCC_PLLI2SConfig+0x10>)
 80005d4:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 80005d8:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800

080005e4 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 80005e4:	4b01      	ldr	r3, [pc, #4]	; (80005ec <RCC_PLLI2SCmd+0x8>)
 80005e6:	6018      	str	r0, [r3, #0]
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	42470068 	.word	0x42470068

080005f0 <RCC_PLLSAIConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 80005f0:	0712      	lsls	r2, r2, #28
 80005f2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80005f6:	4b03      	ldr	r3, [pc, #12]	; (8000604 <RCC_PLLSAIConfig+0x14>)
 80005f8:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 80005fc:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40023800 	.word	0x40023800

08000608 <RCC_PLLSAICmd>:
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 8000608:	4b01      	ldr	r3, [pc, #4]	; (8000610 <RCC_PLLSAICmd+0x8>)
 800060a:	6018      	str	r0, [r3, #0]
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	42470070 	.word	0x42470070

08000614 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8000614:	4b01      	ldr	r3, [pc, #4]	; (800061c <RCC_ClockSecuritySystemCmd+0x8>)
 8000616:	6018      	str	r0, [r3, #0]
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	4247004c 	.word	0x4247004c

08000620 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8000620:	4a03      	ldr	r2, [pc, #12]	; (8000630 <RCC_MCO1Config+0x10>)
 8000622:	6893      	ldr	r3, [r2, #8]
 8000624:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8000628:	4319      	orrs	r1, r3

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 800062a:	4308      	orrs	r0, r1
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800062c:	6090      	str	r0, [r2, #8]
 800062e:	4770      	bx	lr
 8000630:	40023800 	.word	0x40023800

08000634 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8000634:	4a03      	ldr	r2, [pc, #12]	; (8000644 <RCC_MCO2Config+0x10>)
 8000636:	6893      	ldr	r3, [r2, #8]
 8000638:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800063c:	4319      	orrs	r1, r3
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 800063e:	4308      	orrs	r0, r1
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000640:	6090      	str	r0, [r2, #8]
 8000642:	4770      	bx	lr
 8000644:	40023800 	.word	0x40023800

08000648 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8000648:	4a03      	ldr	r2, [pc, #12]	; (8000658 <RCC_SYSCLKConfig+0x10>)
 800064a:	6893      	ldr	r3, [r2, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800064c:	f023 0303 	bic.w	r3, r3, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000650:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000652:	6090      	str	r0, [r2, #8]
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800

0800065c <RCC_GetSYSCLKSource>:
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 800065c:	4b02      	ldr	r3, [pc, #8]	; (8000668 <RCC_GetSYSCLKSource+0xc>)
 800065e:	6898      	ldr	r0, [r3, #8]
}
 8000660:	f000 000c 	and.w	r0, r0, #12
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800

0800066c <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 800066c:	4a03      	ldr	r2, [pc, #12]	; (800067c <RCC_HCLKConfig+0x10>)
 800066e:	6893      	ldr	r3, [r2, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000670:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000674:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000676:	6090      	str	r0, [r2, #8]
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800

08000680 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000680:	4a03      	ldr	r2, [pc, #12]	; (8000690 <RCC_PCLK1Config+0x10>)
 8000682:	6893      	ldr	r3, [r2, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8000684:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000688:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800068a:	6090      	str	r0, [r2, #8]
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800

08000694 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000694:	4a03      	ldr	r2, [pc, #12]	; (80006a4 <RCC_PCLK2Config+0x10>)
 8000696:	6893      	ldr	r3, [r2, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8000698:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800069c:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80006a0:	6090      	str	r0, [r2, #8]
 80006a2:	4770      	bx	lr
 80006a4:	40023800 	.word	0x40023800

080006a8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80006a8:	b410      	push	{r4}
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80006aa:	4c21      	ldr	r4, [pc, #132]	; (8000730 <RCC_GetClocksFreq+0x88>)
 80006ac:	68a3      	ldr	r3, [r4, #8]
  
  switch (tmp)
 80006ae:	f003 030c 	and.w	r3, r3, #12
 80006b2:	2b04      	cmp	r3, #4
 80006b4:	d01a      	beq.n	80006ec <RCC_GetClocksFreq+0x44>
 80006b6:	2b08      	cmp	r3, #8
 80006b8:	d01b      	beq.n	80006f2 <RCC_GetClocksFreq+0x4a>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80006ba:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <RCC_GetClocksFreq+0x8c>)
 80006bc:	6003      	str	r3, [r0, #0]
    break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80006be:	4a1c      	ldr	r2, [pc, #112]	; (8000730 <RCC_GetClocksFreq+0x88>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 80006c0:	491d      	ldr	r1, [pc, #116]	; (8000738 <RCC_GetClocksFreq+0x90>)
    break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80006c2:	6894      	ldr	r4, [r2, #8]
  tmp = tmp >> 4;
 80006c4:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 80006c8:	5d0c      	ldrb	r4, [r1, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80006ca:	40e3      	lsrs	r3, r4
 80006cc:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80006ce:	6894      	ldr	r4, [r2, #8]
  tmp = tmp >> 10;
 80006d0:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 80006d4:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80006d6:	fa23 f404 	lsr.w	r4, r3, r4
 80006da:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80006dc:	6892      	ldr	r2, [r2, #8]
  tmp = tmp >> 13;
  presc = APBAHBPrescTable[tmp];
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
}
 80006de:	bc10      	pop	{r4}
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
  tmp = tmp >> 13;
 80006e0:	f3c2 3242 	ubfx	r2, r2, #13, #3
  presc = APBAHBPrescTable[tmp];
 80006e4:	5c8a      	ldrb	r2, [r1, r2]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80006e6:	40d3      	lsrs	r3, r2
 80006e8:	60c3      	str	r3, [r0, #12]
}
 80006ea:	4770      	bx	lr
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
    break;
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <RCC_GetClocksFreq+0x94>)
 80006ee:	6003      	str	r3, [r0, #0]
    break;
 80006f0:	e7e5      	b.n	80006be <RCC_GetClocksFreq+0x16>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80006f2:	6863      	ldr	r3, [r4, #4]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80006f4:	6861      	ldr	r1, [r4, #4]
    
    if (pllsource != 0)
 80006f6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80006fa:	6863      	ldr	r3, [r4, #4]
 80006fc:	bf18      	it	ne
 80006fe:	4c0f      	ldrne	r4, [pc, #60]	; (800073c <RCC_GetClocksFreq+0x94>)
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000700:	f001 023f 	and.w	r2, r1, #63	; 0x3f
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000704:	bf0c      	ite	eq
 8000706:	490b      	ldreq	r1, [pc, #44]	; (8000734 <RCC_GetClocksFreq+0x8c>)
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
    
    if (pllsource != 0)
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000708:	fbb4 f1f2 	udivne	r1, r4, r2
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800070c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000710:	bf08      	it	eq
 8000712:	fbb1 f1f2 	udiveq	r1, r1, r2
 8000716:	fb01 f203 	mul.w	r2, r1, r3
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800071a:	4b05      	ldr	r3, [pc, #20]	; (8000730 <RCC_GetClocksFreq+0x88>)
 800071c:	685b      	ldr	r3, [r3, #4]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800071e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000722:	3301      	adds	r3, #1
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	fbb2 f3f3 	udiv	r3, r2, r3
 800072a:	6003      	str	r3, [r0, #0]
    break;
 800072c:	e7c7      	b.n	80006be <RCC_GetClocksFreq+0x16>
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	00f42400 	.word	0x00f42400
 8000738:	20000014 	.word	0x20000014
 800073c:	017d7840 	.word	0x017d7840

08000740 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8000740:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8000744:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000748:	d109      	bne.n	800075e <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 800074a:	4908      	ldr	r1, [pc, #32]	; (800076c <RCC_RTCCLKConfig+0x2c>)
 800074c:	688b      	ldr	r3, [r1, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 800074e:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8000752:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000756:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800075a:	4313      	orrs	r3, r2

    /* Store the new value */
    RCC->CFGR = tmpreg;
 800075c:	608b      	str	r3, [r1, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 800075e:	4a03      	ldr	r2, [pc, #12]	; (800076c <RCC_RTCCLKConfig+0x2c>)
 8000760:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000762:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8000766:	4318      	orrs	r0, r3
 8000768:	6710      	str	r0, [r2, #112]	; 0x70
 800076a:	4770      	bx	lr
 800076c:	40023800 	.word	0x40023800

08000770 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000770:	4b01      	ldr	r3, [pc, #4]	; (8000778 <RCC_RTCCLKCmd+0x8>)
 8000772:	6018      	str	r0, [r3, #0]
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	42470e3c 	.word	0x42470e3c

0800077c <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 800077c:	4b01      	ldr	r3, [pc, #4]	; (8000784 <RCC_BackupResetCmd+0x8>)
 800077e:	6018      	str	r0, [r3, #0]
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	42470e40 	.word	0x42470e40

08000788 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
 8000788:	4b01      	ldr	r3, [pc, #4]	; (8000790 <RCC_I2SCLKConfig+0x8>)
 800078a:	6018      	str	r0, [r3, #0]
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	4247015c 	.word	0x4247015c

08000794 <RCC_SAIBlockACLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <RCC_SAIBlockACLKConfig+0x14>)
 8000796:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 800079a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
 800079e:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 80007a0:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800

080007ac <RCC_SAIBlockBCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
 80007ac:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <RCC_SAIBlockBCLKConfig+0x14>)
 80007ae:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 80007b2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
 80007b6:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 80007b8:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800

080007c4 <RCC_SAIPLLI2SClkDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
 80007c4:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <RCC_SAIPLLI2SClkDivConfig+0x14>)
 80007c6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 80007ca:	3801      	subs	r0, #1
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 80007cc:	f023 031f 	bic.w	r3, r3, #31

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 80007d0:	4303      	orrs	r3, r0

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 80007d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007d6:	4770      	bx	lr
 80007d8:	40023800 	.word	0x40023800

080007dc <RCC_SAIPLLSAIClkDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
 80007dc:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <RCC_SAIPLLSAIClkDivConfig+0x18>)
 80007de:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 80007e2:	3801      	subs	r0, #1
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 80007e4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 80007e8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 80007ec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800

080007f8 <RCC_LTDCCLKDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 80007f8:	4a04      	ldr	r2, [pc, #16]	; (800080c <RCC_LTDCCLKDivConfig+0x14>)
 80007fa:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 80007fe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 8000802:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000804:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800

08000810 <RCC_TIMCLKPresConfig>:
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 8000810:	4b01      	ldr	r3, [pc, #4]	; (8000818 <RCC_TIMCLKPresConfig+0x8>)
 8000812:	6018      	str	r0, [r3, #0]
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	424711e0 	.word	0x424711e0

0800081c <RCC_AHB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800081c:	b929      	cbnz	r1, 800082a <RCC_AHB1PeriphClockCmd+0xe>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800081e:	4a05      	ldr	r2, [pc, #20]	; (8000834 <RCC_AHB1PeriphClockCmd+0x18>)
 8000820:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000822:	ea23 0000 	bic.w	r0, r3, r0
 8000826:	6310      	str	r0, [r2, #48]	; 0x30
 8000828:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800082a:	4b02      	ldr	r3, [pc, #8]	; (8000834 <RCC_AHB1PeriphClockCmd+0x18>)
 800082c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800082e:	4310      	orrs	r0, r2
 8000830:	6318      	str	r0, [r3, #48]	; 0x30
 8000832:	4770      	bx	lr
 8000834:	40023800 	.word	0x40023800

08000838 <RCC_AHB2PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000838:	b929      	cbnz	r1, 8000846 <RCC_AHB2PeriphClockCmd+0xe>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 800083a:	4a05      	ldr	r2, [pc, #20]	; (8000850 <RCC_AHB2PeriphClockCmd+0x18>)
 800083c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800083e:	ea23 0000 	bic.w	r0, r3, r0
 8000842:	6350      	str	r0, [r2, #52]	; 0x34
 8000844:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000846:	4b02      	ldr	r3, [pc, #8]	; (8000850 <RCC_AHB2PeriphClockCmd+0x18>)
 8000848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800084a:	4310      	orrs	r0, r2
 800084c:	6358      	str	r0, [r3, #52]	; 0x34
 800084e:	4770      	bx	lr
 8000850:	40023800 	.word	0x40023800

08000854 <RCC_AHB3PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000854:	b929      	cbnz	r1, 8000862 <RCC_AHB3PeriphClockCmd+0xe>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8000856:	4a05      	ldr	r2, [pc, #20]	; (800086c <RCC_AHB3PeriphClockCmd+0x18>)
 8000858:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800085a:	ea23 0000 	bic.w	r0, r3, r0
 800085e:	6390      	str	r0, [r2, #56]	; 0x38
 8000860:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000862:	4b02      	ldr	r3, [pc, #8]	; (800086c <RCC_AHB3PeriphClockCmd+0x18>)
 8000864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000866:	4310      	orrs	r0, r2
 8000868:	6398      	str	r0, [r3, #56]	; 0x38
 800086a:	4770      	bx	lr
 800086c:	40023800 	.word	0x40023800

08000870 <RCC_APB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000870:	b929      	cbnz	r1, 800087e <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000872:	4a05      	ldr	r2, [pc, #20]	; (8000888 <RCC_APB1PeriphClockCmd+0x18>)
 8000874:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000876:	ea23 0000 	bic.w	r0, r3, r0
 800087a:	6410      	str	r0, [r2, #64]	; 0x40
 800087c:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800087e:	4b02      	ldr	r3, [pc, #8]	; (8000888 <RCC_APB1PeriphClockCmd+0x18>)
 8000880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000882:	4310      	orrs	r0, r2
 8000884:	6418      	str	r0, [r3, #64]	; 0x40
 8000886:	4770      	bx	lr
 8000888:	40023800 	.word	0x40023800

0800088c <RCC_APB2PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800088c:	b929      	cbnz	r1, 800089a <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800088e:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <RCC_APB2PeriphClockCmd+0x18>)
 8000890:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8000892:	ea23 0000 	bic.w	r0, r3, r0
 8000896:	6450      	str	r0, [r2, #68]	; 0x44
 8000898:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800089a:	4b02      	ldr	r3, [pc, #8]	; (80008a4 <RCC_APB2PeriphClockCmd+0x18>)
 800089c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800089e:	4310      	orrs	r0, r2
 80008a0:	6458      	str	r0, [r3, #68]	; 0x44
 80008a2:	4770      	bx	lr
 80008a4:	40023800 	.word	0x40023800

080008a8 <RCC_AHB1PeriphResetCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80008a8:	b929      	cbnz	r1, 80008b6 <RCC_AHB1PeriphResetCmd+0xe>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 80008aa:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <RCC_AHB1PeriphResetCmd+0x18>)
 80008ac:	6913      	ldr	r3, [r2, #16]
 80008ae:	ea23 0000 	bic.w	r0, r3, r0
 80008b2:	6110      	str	r0, [r2, #16]
 80008b4:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 80008b6:	4b02      	ldr	r3, [pc, #8]	; (80008c0 <RCC_AHB1PeriphResetCmd+0x18>)
 80008b8:	691a      	ldr	r2, [r3, #16]
 80008ba:	4310      	orrs	r0, r2
 80008bc:	6118      	str	r0, [r3, #16]
 80008be:	4770      	bx	lr
 80008c0:	40023800 	.word	0x40023800

080008c4 <RCC_AHB2PeriphResetCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80008c4:	b929      	cbnz	r1, 80008d2 <RCC_AHB2PeriphResetCmd+0xe>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 80008c6:	4a05      	ldr	r2, [pc, #20]	; (80008dc <RCC_AHB2PeriphResetCmd+0x18>)
 80008c8:	6953      	ldr	r3, [r2, #20]
 80008ca:	ea23 0000 	bic.w	r0, r3, r0
 80008ce:	6150      	str	r0, [r2, #20]
 80008d0:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 80008d2:	4b02      	ldr	r3, [pc, #8]	; (80008dc <RCC_AHB2PeriphResetCmd+0x18>)
 80008d4:	695a      	ldr	r2, [r3, #20]
 80008d6:	4310      	orrs	r0, r2
 80008d8:	6158      	str	r0, [r3, #20]
 80008da:	4770      	bx	lr
 80008dc:	40023800 	.word	0x40023800

080008e0 <RCC_AHB3PeriphResetCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80008e0:	b929      	cbnz	r1, 80008ee <RCC_AHB3PeriphResetCmd+0xe>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 80008e2:	4a05      	ldr	r2, [pc, #20]	; (80008f8 <RCC_AHB3PeriphResetCmd+0x18>)
 80008e4:	6993      	ldr	r3, [r2, #24]
 80008e6:	ea23 0000 	bic.w	r0, r3, r0
 80008ea:	6190      	str	r0, [r2, #24]
 80008ec:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 80008ee:	4b02      	ldr	r3, [pc, #8]	; (80008f8 <RCC_AHB3PeriphResetCmd+0x18>)
 80008f0:	699a      	ldr	r2, [r3, #24]
 80008f2:	4310      	orrs	r0, r2
 80008f4:	6198      	str	r0, [r3, #24]
 80008f6:	4770      	bx	lr
 80008f8:	40023800 	.word	0x40023800

080008fc <RCC_APB1PeriphResetCmd>:
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008fc:	b929      	cbnz	r1, 800090a <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80008fe:	4a05      	ldr	r2, [pc, #20]	; (8000914 <RCC_APB1PeriphResetCmd+0x18>)
 8000900:	6a13      	ldr	r3, [r2, #32]
 8000902:	ea23 0000 	bic.w	r0, r3, r0
 8000906:	6210      	str	r0, [r2, #32]
 8000908:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800090a:	4b02      	ldr	r3, [pc, #8]	; (8000914 <RCC_APB1PeriphResetCmd+0x18>)
 800090c:	6a1a      	ldr	r2, [r3, #32]
 800090e:	4310      	orrs	r0, r2
 8000910:	6218      	str	r0, [r3, #32]
 8000912:	4770      	bx	lr
 8000914:	40023800 	.word	0x40023800

08000918 <RCC_APB2PeriphResetCmd>:
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000918:	b929      	cbnz	r1, 8000926 <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800091a:	4a05      	ldr	r2, [pc, #20]	; (8000930 <RCC_APB2PeriphResetCmd+0x18>)
 800091c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800091e:	ea23 0000 	bic.w	r0, r3, r0
 8000922:	6250      	str	r0, [r2, #36]	; 0x24
 8000924:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000926:	4b02      	ldr	r3, [pc, #8]	; (8000930 <RCC_APB2PeriphResetCmd+0x18>)
 8000928:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800092a:	4310      	orrs	r0, r2
 800092c:	6258      	str	r0, [r3, #36]	; 0x24
 800092e:	4770      	bx	lr
 8000930:	40023800 	.word	0x40023800

08000934 <RCC_AHB1PeriphClockLPModeCmd>:
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000934:	b929      	cbnz	r1, 8000942 <RCC_AHB1PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8000936:	4a05      	ldr	r2, [pc, #20]	; (800094c <RCC_AHB1PeriphClockLPModeCmd+0x18>)
 8000938:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800093a:	ea23 0000 	bic.w	r0, r3, r0
 800093e:	6510      	str	r0, [r2, #80]	; 0x50
 8000940:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000942:	4b02      	ldr	r3, [pc, #8]	; (800094c <RCC_AHB1PeriphClockLPModeCmd+0x18>)
 8000944:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000946:	4310      	orrs	r0, r2
 8000948:	6518      	str	r0, [r3, #80]	; 0x50
 800094a:	4770      	bx	lr
 800094c:	40023800 	.word	0x40023800

08000950 <RCC_AHB2PeriphClockLPModeCmd>:
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000950:	b929      	cbnz	r1, 800095e <RCC_AHB2PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8000952:	4a05      	ldr	r2, [pc, #20]	; (8000968 <RCC_AHB2PeriphClockLPModeCmd+0x18>)
 8000954:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8000956:	ea23 0000 	bic.w	r0, r3, r0
 800095a:	6550      	str	r0, [r2, #84]	; 0x54
 800095c:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 800095e:	4b02      	ldr	r3, [pc, #8]	; (8000968 <RCC_AHB2PeriphClockLPModeCmd+0x18>)
 8000960:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000962:	4310      	orrs	r0, r2
 8000964:	6558      	str	r0, [r3, #84]	; 0x54
 8000966:	4770      	bx	lr
 8000968:	40023800 	.word	0x40023800

0800096c <RCC_AHB3PeriphClockLPModeCmd>:
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800096c:	b929      	cbnz	r1, 800097a <RCC_AHB3PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <RCC_AHB3PeriphClockLPModeCmd+0x18>)
 8000970:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8000972:	ea23 0000 	bic.w	r0, r3, r0
 8000976:	6590      	str	r0, [r2, #88]	; 0x58
 8000978:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 800097a:	4b02      	ldr	r3, [pc, #8]	; (8000984 <RCC_AHB3PeriphClockLPModeCmd+0x18>)
 800097c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800097e:	4310      	orrs	r0, r2
 8000980:	6598      	str	r0, [r3, #88]	; 0x58
 8000982:	4770      	bx	lr
 8000984:	40023800 	.word	0x40023800

08000988 <RCC_APB1PeriphClockLPModeCmd>:
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000988:	b929      	cbnz	r1, 8000996 <RCC_APB1PeriphClockLPModeCmd+0xe>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 800098a:	4a05      	ldr	r2, [pc, #20]	; (80009a0 <RCC_APB1PeriphClockLPModeCmd+0x18>)
 800098c:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800098e:	ea23 0000 	bic.w	r0, r3, r0
 8000992:	6610      	str	r0, [r2, #96]	; 0x60
 8000994:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8000996:	4b02      	ldr	r3, [pc, #8]	; (80009a0 <RCC_APB1PeriphClockLPModeCmd+0x18>)
 8000998:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800099a:	4310      	orrs	r0, r2
 800099c:	6618      	str	r0, [r3, #96]	; 0x60
 800099e:	4770      	bx	lr
 80009a0:	40023800 	.word	0x40023800

080009a4 <RCC_APB2PeriphClockLPModeCmd>:
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009a4:	b929      	cbnz	r1, 80009b2 <RCC_APB2PeriphClockLPModeCmd+0xe>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 80009a6:	4a05      	ldr	r2, [pc, #20]	; (80009bc <RCC_APB2PeriphClockLPModeCmd+0x18>)
 80009a8:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80009aa:	ea23 0000 	bic.w	r0, r3, r0
 80009ae:	6650      	str	r0, [r2, #100]	; 0x64
 80009b0:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 80009b2:	4b02      	ldr	r3, [pc, #8]	; (80009bc <RCC_APB2PeriphClockLPModeCmd+0x18>)
 80009b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80009b6:	4310      	orrs	r0, r2
 80009b8:	6658      	str	r0, [r3, #100]	; 0x64
 80009ba:	4770      	bx	lr
 80009bc:	40023800 	.word	0x40023800

080009c0 <RCC_LSEModeConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
 80009c0:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <RCC_LSEModeConfig+0x14>)
 80009c2:	6f13      	ldr	r3, [r2, #112]	; 0x70
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
 80009c4:	2801      	cmp	r0, #1
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
 80009c6:	bf0c      	ite	eq
 80009c8:	f043 0308 	orreq.w	r3, r3, #8
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
 80009cc:	f023 0308 	bicne.w	r3, r3, #8
 80009d0:	6713      	str	r3, [r2, #112]	; 0x70
 80009d2:	4770      	bx	lr
 80009d4:	40023800 	.word	0x40023800

080009d8 <RCC_ITConfig>:
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009d8:	b929      	cbnz	r1, 80009e6 <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 80009da:	4a05      	ldr	r2, [pc, #20]	; (80009f0 <RCC_ITConfig+0x18>)
 80009dc:	7813      	ldrb	r3, [r2, #0]
 80009de:	ea23 0000 	bic.w	r0, r3, r0
 80009e2:	7010      	strb	r0, [r2, #0]
 80009e4:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80009e6:	4b02      	ldr	r3, [pc, #8]	; (80009f0 <RCC_ITConfig+0x18>)
 80009e8:	781a      	ldrb	r2, [r3, #0]
 80009ea:	4310      	orrs	r0, r2
 80009ec:	7018      	strb	r0, [r3, #0]
 80009ee:	4770      	bx	lr
 80009f0:	4002380d 	.word	0x4002380d

080009f4 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80009f4:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d00b      	beq.n	8000a12 <RCC_GetFlagStatus+0x1e>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80009fa:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <RCC_GetFlagStatus+0x30>)
 80009fe:	bf0c      	ite	eq
 8000a00:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000a02:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 8000a04:	f000 001f 	and.w	r0, r0, #31
 8000a08:	fa23 f000 	lsr.w	r0, r3, r0
}
 8000a0c:	f000 0001 	and.w	r0, r0, #1
 8000a10:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000a12:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <RCC_GetFlagStatus+0x30>)
 8000a14:	681b      	ldr	r3, [r3, #0]
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 8000a16:	f000 001f 	and.w	r0, r0, #31
 8000a1a:	fa23 f000 	lsr.w	r0, r3, r0
}
 8000a1e:	f000 0001 	and.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	40023800 	.word	0x40023800

08000a28 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8000a28:	4a02      	ldr	r2, [pc, #8]	; (8000a34 <RCC_ClearFlag+0xc>)
 8000a2a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000a2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a30:	6753      	str	r3, [r2, #116]	; 0x74
 8000a32:	4770      	bx	lr
 8000a34:	40023800 	.word	0x40023800

08000a38 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <RCC_GetITStatus+0x10>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
  else
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8000a3c:	4218      	tst	r0, r3
}
 8000a3e:	bf14      	ite	ne
 8000a40:	2001      	movne	r0, #1
 8000a42:	2000      	moveq	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800

08000a4c <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8000a4c:	4b01      	ldr	r3, [pc, #4]	; (8000a54 <RCC_ClearITPendingBit+0x8>)
 8000a4e:	7018      	strb	r0, [r3, #0]
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	4002380e 	.word	0x4002380e

08000a58 <__aeabi_fmul>:
 8000a58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a60:	bf1e      	ittt	ne
 8000a62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a66:	ea92 0f0c 	teqne	r2, ip
 8000a6a:	ea93 0f0c 	teqne	r3, ip
 8000a6e:	d06f      	beq.n	8000b50 <__aeabi_fmul+0xf8>
 8000a70:	441a      	add	r2, r3
 8000a72:	ea80 0c01 	eor.w	ip, r0, r1
 8000a76:	0240      	lsls	r0, r0, #9
 8000a78:	bf18      	it	ne
 8000a7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000a7e:	d01e      	beq.n	8000abe <__aeabi_fmul+0x66>
 8000a80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a98:	bf3e      	ittt	cc
 8000a9a:	0049      	lslcc	r1, r1, #1
 8000a9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000aa0:	005b      	lslcc	r3, r3, #1
 8000aa2:	ea40 0001 	orr.w	r0, r0, r1
 8000aa6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000aaa:	2afd      	cmp	r2, #253	; 0xfd
 8000aac:	d81d      	bhi.n	8000aea <__aeabi_fmul+0x92>
 8000aae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ab2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ab6:	bf08      	it	eq
 8000ab8:	f020 0001 	biceq.w	r0, r0, #1
 8000abc:	4770      	bx	lr
 8000abe:	f090 0f00 	teq	r0, #0
 8000ac2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ac6:	bf08      	it	eq
 8000ac8:	0249      	lsleq	r1, r1, #9
 8000aca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ace:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ad2:	3a7f      	subs	r2, #127	; 0x7f
 8000ad4:	bfc2      	ittt	gt
 8000ad6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ada:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ade:	4770      	bxgt	lr
 8000ae0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae4:	f04f 0300 	mov.w	r3, #0
 8000ae8:	3a01      	subs	r2, #1
 8000aea:	dc5d      	bgt.n	8000ba8 <__aeabi_fmul+0x150>
 8000aec:	f112 0f19 	cmn.w	r2, #25
 8000af0:	bfdc      	itt	le
 8000af2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000af6:	4770      	bxle	lr
 8000af8:	f1c2 0200 	rsb	r2, r2, #0
 8000afc:	0041      	lsls	r1, r0, #1
 8000afe:	fa21 f102 	lsr.w	r1, r1, r2
 8000b02:	f1c2 0220 	rsb	r2, r2, #32
 8000b06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000b0e:	f140 0000 	adc.w	r0, r0, #0
 8000b12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000b16:	bf08      	it	eq
 8000b18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b1c:	4770      	bx	lr
 8000b1e:	f092 0f00 	teq	r2, #0
 8000b22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000b26:	bf02      	ittt	eq
 8000b28:	0040      	lsleq	r0, r0, #1
 8000b2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000b2e:	3a01      	subeq	r2, #1
 8000b30:	d0f9      	beq.n	8000b26 <__aeabi_fmul+0xce>
 8000b32:	ea40 000c 	orr.w	r0, r0, ip
 8000b36:	f093 0f00 	teq	r3, #0
 8000b3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b3e:	bf02      	ittt	eq
 8000b40:	0049      	lsleq	r1, r1, #1
 8000b42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b46:	3b01      	subeq	r3, #1
 8000b48:	d0f9      	beq.n	8000b3e <__aeabi_fmul+0xe6>
 8000b4a:	ea41 010c 	orr.w	r1, r1, ip
 8000b4e:	e78f      	b.n	8000a70 <__aeabi_fmul+0x18>
 8000b50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b54:	ea92 0f0c 	teq	r2, ip
 8000b58:	bf18      	it	ne
 8000b5a:	ea93 0f0c 	teqne	r3, ip
 8000b5e:	d00a      	beq.n	8000b76 <__aeabi_fmul+0x11e>
 8000b60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b64:	bf18      	it	ne
 8000b66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b6a:	d1d8      	bne.n	8000b1e <__aeabi_fmul+0xc6>
 8000b6c:	ea80 0001 	eor.w	r0, r0, r1
 8000b70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b74:	4770      	bx	lr
 8000b76:	f090 0f00 	teq	r0, #0
 8000b7a:	bf17      	itett	ne
 8000b7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b80:	4608      	moveq	r0, r1
 8000b82:	f091 0f00 	teqne	r1, #0
 8000b86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b8a:	d014      	beq.n	8000bb6 <__aeabi_fmul+0x15e>
 8000b8c:	ea92 0f0c 	teq	r2, ip
 8000b90:	d101      	bne.n	8000b96 <__aeabi_fmul+0x13e>
 8000b92:	0242      	lsls	r2, r0, #9
 8000b94:	d10f      	bne.n	8000bb6 <__aeabi_fmul+0x15e>
 8000b96:	ea93 0f0c 	teq	r3, ip
 8000b9a:	d103      	bne.n	8000ba4 <__aeabi_fmul+0x14c>
 8000b9c:	024b      	lsls	r3, r1, #9
 8000b9e:	bf18      	it	ne
 8000ba0:	4608      	movne	r0, r1
 8000ba2:	d108      	bne.n	8000bb6 <__aeabi_fmul+0x15e>
 8000ba4:	ea80 0001 	eor.w	r0, r0, r1
 8000ba8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000bac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb4:	4770      	bx	lr
 8000bb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bx	lr

08000bc0 <__aeabi_fdiv>:
 8000bc0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bc4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc8:	bf1e      	ittt	ne
 8000bca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bce:	ea92 0f0c 	teqne	r2, ip
 8000bd2:	ea93 0f0c 	teqne	r3, ip
 8000bd6:	d069      	beq.n	8000cac <__aeabi_fdiv+0xec>
 8000bd8:	eba2 0203 	sub.w	r2, r2, r3
 8000bdc:	ea80 0c01 	eor.w	ip, r0, r1
 8000be0:	0249      	lsls	r1, r1, #9
 8000be2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000be6:	d037      	beq.n	8000c58 <__aeabi_fdiv+0x98>
 8000be8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000bec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000bf0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000bf4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	bf38      	it	cc
 8000bfc:	005b      	lslcc	r3, r3, #1
 8000bfe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000c02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000c06:	428b      	cmp	r3, r1
 8000c08:	bf24      	itt	cs
 8000c0a:	1a5b      	subcs	r3, r3, r1
 8000c0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000c14:	bf24      	itt	cs
 8000c16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000c1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000c22:	bf24      	itt	cs
 8000c24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000c28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000c30:	bf24      	itt	cs
 8000c32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000c36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c3a:	011b      	lsls	r3, r3, #4
 8000c3c:	bf18      	it	ne
 8000c3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000c42:	d1e0      	bne.n	8000c06 <__aeabi_fdiv+0x46>
 8000c44:	2afd      	cmp	r2, #253	; 0xfd
 8000c46:	f63f af50 	bhi.w	8000aea <__aeabi_fmul+0x92>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c60:	327f      	adds	r2, #127	; 0x7f
 8000c62:	bfc2      	ittt	gt
 8000c64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c6c:	4770      	bxgt	lr
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	f04f 0300 	mov.w	r3, #0
 8000c76:	3a01      	subs	r2, #1
 8000c78:	e737      	b.n	8000aea <__aeabi_fmul+0x92>
 8000c7a:	f092 0f00 	teq	r2, #0
 8000c7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c82:	bf02      	ittt	eq
 8000c84:	0040      	lsleq	r0, r0, #1
 8000c86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c8a:	3a01      	subeq	r2, #1
 8000c8c:	d0f9      	beq.n	8000c82 <__aeabi_fdiv+0xc2>
 8000c8e:	ea40 000c 	orr.w	r0, r0, ip
 8000c92:	f093 0f00 	teq	r3, #0
 8000c96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9a:	bf02      	ittt	eq
 8000c9c:	0049      	lsleq	r1, r1, #1
 8000c9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ca2:	3b01      	subeq	r3, #1
 8000ca4:	d0f9      	beq.n	8000c9a <__aeabi_fdiv+0xda>
 8000ca6:	ea41 010c 	orr.w	r1, r1, ip
 8000caa:	e795      	b.n	8000bd8 <__aeabi_fdiv+0x18>
 8000cac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb0:	ea92 0f0c 	teq	r2, ip
 8000cb4:	d108      	bne.n	8000cc8 <__aeabi_fdiv+0x108>
 8000cb6:	0242      	lsls	r2, r0, #9
 8000cb8:	f47f af7d 	bne.w	8000bb6 <__aeabi_fmul+0x15e>
 8000cbc:	ea93 0f0c 	teq	r3, ip
 8000cc0:	f47f af70 	bne.w	8000ba4 <__aeabi_fmul+0x14c>
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	e776      	b.n	8000bb6 <__aeabi_fmul+0x15e>
 8000cc8:	ea93 0f0c 	teq	r3, ip
 8000ccc:	d104      	bne.n	8000cd8 <__aeabi_fdiv+0x118>
 8000cce:	024b      	lsls	r3, r1, #9
 8000cd0:	f43f af4c 	beq.w	8000b6c <__aeabi_fmul+0x114>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	e76e      	b.n	8000bb6 <__aeabi_fmul+0x15e>
 8000cd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cdc:	bf18      	it	ne
 8000cde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ce2:	d1ca      	bne.n	8000c7a <__aeabi_fdiv+0xba>
 8000ce4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ce8:	f47f af5c 	bne.w	8000ba4 <__aeabi_fmul+0x14c>
 8000cec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000cf0:	f47f af3c 	bne.w	8000b6c <__aeabi_fmul+0x114>
 8000cf4:	e75f      	b.n	8000bb6 <__aeabi_fmul+0x15e>
 8000cf6:	bf00      	nop

08000cf8 <__gesf2>:
 8000cf8:	f04f 3cff 	mov.w	ip, #4294967295
 8000cfc:	e006      	b.n	8000d0c <__cmpsf2+0x4>
 8000cfe:	bf00      	nop

08000d00 <__lesf2>:
 8000d00:	f04f 0c01 	mov.w	ip, #1
 8000d04:	e002      	b.n	8000d0c <__cmpsf2+0x4>
 8000d06:	bf00      	nop

08000d08 <__cmpsf2>:
 8000d08:	f04f 0c01 	mov.w	ip, #1
 8000d0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d1c:	bf18      	it	ne
 8000d1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d22:	d011      	beq.n	8000d48 <__cmpsf2+0x40>
 8000d24:	b001      	add	sp, #4
 8000d26:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d2a:	bf18      	it	ne
 8000d2c:	ea90 0f01 	teqne	r0, r1
 8000d30:	bf58      	it	pl
 8000d32:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d36:	bf88      	it	hi
 8000d38:	17c8      	asrhi	r0, r1, #31
 8000d3a:	bf38      	it	cc
 8000d3c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d40:	bf18      	it	ne
 8000d42:	f040 0001 	orrne.w	r0, r0, #1
 8000d46:	4770      	bx	lr
 8000d48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d4c:	d102      	bne.n	8000d54 <__cmpsf2+0x4c>
 8000d4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d52:	d105      	bne.n	8000d60 <__cmpsf2+0x58>
 8000d54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d58:	d1e4      	bne.n	8000d24 <__cmpsf2+0x1c>
 8000d5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d5e:	d0e1      	beq.n	8000d24 <__cmpsf2+0x1c>
 8000d60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <__aeabi_cfrcmple>:
 8000d68:	4684      	mov	ip, r0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	4661      	mov	r1, ip
 8000d6e:	e7ff      	b.n	8000d70 <__aeabi_cfcmpeq>

08000d70 <__aeabi_cfcmpeq>:
 8000d70:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d72:	f7ff ffc9 	bl	8000d08 <__cmpsf2>
 8000d76:	2800      	cmp	r0, #0
 8000d78:	bf48      	it	mi
 8000d7a:	f110 0f00 	cmnmi.w	r0, #0
 8000d7e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d80 <__aeabi_fcmpeq>:
 8000d80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d84:	f7ff fff4 	bl	8000d70 <__aeabi_cfcmpeq>
 8000d88:	bf0c      	ite	eq
 8000d8a:	2001      	moveq	r0, #1
 8000d8c:	2000      	movne	r0, #0
 8000d8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d92:	bf00      	nop

08000d94 <__aeabi_fcmplt>:
 8000d94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d98:	f7ff ffea 	bl	8000d70 <__aeabi_cfcmpeq>
 8000d9c:	bf34      	ite	cc
 8000d9e:	2001      	movcc	r0, #1
 8000da0:	2000      	movcs	r0, #0
 8000da2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da6:	bf00      	nop

08000da8 <__aeabi_fcmple>:
 8000da8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dac:	f7ff ffe0 	bl	8000d70 <__aeabi_cfcmpeq>
 8000db0:	bf94      	ite	ls
 8000db2:	2001      	movls	r0, #1
 8000db4:	2000      	movhi	r0, #0
 8000db6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dba:	bf00      	nop

08000dbc <__aeabi_fcmpge>:
 8000dbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dc0:	f7ff ffd2 	bl	8000d68 <__aeabi_cfrcmple>
 8000dc4:	bf94      	ite	ls
 8000dc6:	2001      	movls	r0, #1
 8000dc8:	2000      	movhi	r0, #0
 8000dca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dce:	bf00      	nop

08000dd0 <__aeabi_fcmpgt>:
 8000dd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd4:	f7ff ffc8 	bl	8000d68 <__aeabi_cfrcmple>
 8000dd8:	bf34      	ite	cc
 8000dda:	2001      	movcc	r0, #1
 8000ddc:	2000      	movcs	r0, #0
 8000dde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000de2:	bf00      	nop

08000de4 <memcpy>:
 8000de4:	4684      	mov	ip, r0
 8000de6:	ea41 0300 	orr.w	r3, r1, r0
 8000dea:	f013 0303 	ands.w	r3, r3, #3
 8000dee:	d16d      	bne.n	8000ecc <memcpy+0xe8>
 8000df0:	3a40      	subs	r2, #64	; 0x40
 8000df2:	d341      	bcc.n	8000e78 <memcpy+0x94>
 8000df4:	f851 3b04 	ldr.w	r3, [r1], #4
 8000df8:	f840 3b04 	str.w	r3, [r0], #4
 8000dfc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000e00:	f840 3b04 	str.w	r3, [r0], #4
 8000e04:	f851 3b04 	ldr.w	r3, [r1], #4
 8000e08:	f840 3b04 	str.w	r3, [r0], #4
 8000e0c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000e10:	f840 3b04 	str.w	r3, [r0], #4
 8000e14:	f851 3b04 	ldr.w	r3, [r1], #4
 8000e18:	f840 3b04 	str.w	r3, [r0], #4
 8000e1c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000e20:	f840 3b04 	str.w	r3, [r0], #4
 8000e24:	f851 3b04 	ldr.w	r3, [r1], #4
 8000e28:	f840 3b04 	str.w	r3, [r0], #4
 8000e2c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000e30:	f840 3b04 	str.w	r3, [r0], #4
 8000e34:	f851 3b04 	ldr.w	r3, [r1], #4
 8000e38:	f840 3b04 	str.w	r3, [r0], #4
 8000e3c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000e40:	f840 3b04 	str.w	r3, [r0], #4
 8000e44:	f851 3b04 	ldr.w	r3, [r1], #4
 8000e48:	f840 3b04 	str.w	r3, [r0], #4
 8000e4c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000e50:	f840 3b04 	str.w	r3, [r0], #4
 8000e54:	f851 3b04 	ldr.w	r3, [r1], #4
 8000e58:	f840 3b04 	str.w	r3, [r0], #4
 8000e5c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000e60:	f840 3b04 	str.w	r3, [r0], #4
 8000e64:	f851 3b04 	ldr.w	r3, [r1], #4
 8000e68:	f840 3b04 	str.w	r3, [r0], #4
 8000e6c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000e70:	f840 3b04 	str.w	r3, [r0], #4
 8000e74:	3a40      	subs	r2, #64	; 0x40
 8000e76:	d2bd      	bcs.n	8000df4 <memcpy+0x10>
 8000e78:	3230      	adds	r2, #48	; 0x30
 8000e7a:	d311      	bcc.n	8000ea0 <memcpy+0xbc>
 8000e7c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000e80:	f840 3b04 	str.w	r3, [r0], #4
 8000e84:	f851 3b04 	ldr.w	r3, [r1], #4
 8000e88:	f840 3b04 	str.w	r3, [r0], #4
 8000e8c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000e90:	f840 3b04 	str.w	r3, [r0], #4
 8000e94:	f851 3b04 	ldr.w	r3, [r1], #4
 8000e98:	f840 3b04 	str.w	r3, [r0], #4
 8000e9c:	3a10      	subs	r2, #16
 8000e9e:	d2ed      	bcs.n	8000e7c <memcpy+0x98>
 8000ea0:	320c      	adds	r2, #12
 8000ea2:	d305      	bcc.n	8000eb0 <memcpy+0xcc>
 8000ea4:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ea8:	f840 3b04 	str.w	r3, [r0], #4
 8000eac:	3a04      	subs	r2, #4
 8000eae:	d2f9      	bcs.n	8000ea4 <memcpy+0xc0>
 8000eb0:	3204      	adds	r2, #4
 8000eb2:	d008      	beq.n	8000ec6 <memcpy+0xe2>
 8000eb4:	07d2      	lsls	r2, r2, #31
 8000eb6:	bf1c      	itt	ne
 8000eb8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000ebc:	f800 3b01 	strbne.w	r3, [r0], #1
 8000ec0:	d301      	bcc.n	8000ec6 <memcpy+0xe2>
 8000ec2:	880b      	ldrh	r3, [r1, #0]
 8000ec4:	8003      	strh	r3, [r0, #0]
 8000ec6:	4660      	mov	r0, ip
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	2a08      	cmp	r2, #8
 8000ece:	d313      	bcc.n	8000ef8 <memcpy+0x114>
 8000ed0:	078b      	lsls	r3, r1, #30
 8000ed2:	d08d      	beq.n	8000df0 <memcpy+0xc>
 8000ed4:	f010 0303 	ands.w	r3, r0, #3
 8000ed8:	d08a      	beq.n	8000df0 <memcpy+0xc>
 8000eda:	f1c3 0304 	rsb	r3, r3, #4
 8000ede:	1ad2      	subs	r2, r2, r3
 8000ee0:	07db      	lsls	r3, r3, #31
 8000ee2:	bf1c      	itt	ne
 8000ee4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000ee8:	f800 3b01 	strbne.w	r3, [r0], #1
 8000eec:	d380      	bcc.n	8000df0 <memcpy+0xc>
 8000eee:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000ef2:	f820 3b02 	strh.w	r3, [r0], #2
 8000ef6:	e77b      	b.n	8000df0 <memcpy+0xc>
 8000ef8:	3a04      	subs	r2, #4
 8000efa:	d3d9      	bcc.n	8000eb0 <memcpy+0xcc>
 8000efc:	3a01      	subs	r2, #1
 8000efe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000f02:	f800 3b01 	strb.w	r3, [r0], #1
 8000f06:	d2f9      	bcs.n	8000efc <memcpy+0x118>
 8000f08:	780b      	ldrb	r3, [r1, #0]
 8000f0a:	7003      	strb	r3, [r0, #0]
 8000f0c:	784b      	ldrb	r3, [r1, #1]
 8000f0e:	7043      	strb	r3, [r0, #1]
 8000f10:	788b      	ldrb	r3, [r1, #2]
 8000f12:	7083      	strb	r3, [r0, #2]
 8000f14:	4660      	mov	r0, ip
 8000f16:	4770      	bx	lr

08000f18 <main>:

void DelayByDiv(void);

int main(int argc, char *argv[])

{
 8000f18:	b530      	push	{r4, r5, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);//Ê¹ÄÜGPIOFÊ±ÖÓ
 8000f1a:	2101      	movs	r1, #1

void DelayByDiv(void);

int main(int argc, char *argv[])

{
 8000f1c:	b083      	sub	sp, #12

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);//Ê¹ÄÜGPIOFÊ±ÖÓ
 8000f1e:	2020      	movs	r0, #32
 8000f20:	f7ff fc7c 	bl	800081c <RCC_AHB1PeriphClockCmd>



	//GPIOF9,F10³õÊŒ»¯ÉèÖÃ

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;//LED0ºÍLED1¶ÔÓŠIO¿Ú
 8000f24:	f44f 64c0 	mov.w	r4, #1536	; 0x600

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;//ÆÕÍšÊä³öÄ£Êœ
 8000f28:	2301      	movs	r3, #1

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//ÍÆÍìÊä³ö

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;//100MHz
 8000f2a:	2203      	movs	r2, #3

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//ÉÏÀ­

	GPIO_Init(GPIOF, &GPIO_InitStructure);//³õÊŒ»¯GPIO
 8000f2c:	4669      	mov	r1, sp
 8000f2e:	481e      	ldr	r0, [pc, #120]	; (8000fa8 <main+0x90>)



	//GPIOF9,F10³õÊŒ»¯ÉèÖÃ

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;//LED0ºÍLED1¶ÔÓŠIO¿Ú
 8000f30:	9400      	str	r4, [sp, #0]

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;//ÆÕÍšÊä³öÄ£Êœ

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//ÍÆÍìÊä³ö
 8000f32:	2500      	movs	r5, #0

	//GPIOF9,F10³õÊŒ»¯ÉèÖÃ

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;//LED0ºÍLED1¶ÔÓŠIO¿Ú

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;//ÆÕÍšÊä³öÄ£Êœ
 8000f34:	f88d 3004 	strb.w	r3, [sp, #4]

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//ÍÆÍìÊä³ö

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;//100MHz

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//ÉÏÀ­
 8000f38:	f88d 3007 	strb.w	r3, [sp, #7]

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;//LED0ºÍLED1¶ÔÓŠIO¿Ú

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;//ÆÕÍšÊä³öÄ£Êœ

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//ÍÆÍìÊä³ö
 8000f3c:	f88d 5006 	strb.w	r5, [sp, #6]

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;//100MHz
 8000f40:	f88d 2005 	strb.w	r2, [sp, #5]

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//ÉÏÀ­

	GPIO_Init(GPIOF, &GPIO_InitStructure);//³õÊŒ»¯GPIO
 8000f44:	f7ff fa16 	bl	8000374 <GPIO_Init>

	
	GPIO_SetBits(GPIOF,GPIO_Pin_9 | GPIO_Pin_10);//GPIOF9,F10ÉèÖÃžß£¬µÆÃð
 8000f48:	4621      	mov	r1, r4
 8000f4a:	4817      	ldr	r0, [pc, #92]	; (8000fa8 <main+0x90>)
 8000f4c:	f7ff fa94 	bl	8000478 <GPIO_SetBits>
	while(1)

	{


	GPIO_ResetBits(GPIOF,GPIO_Pin_9);  //LED0¶ÔÓŠÒýœÅGPIOF.9À­µÍ£¬ÁÁ  µÈÍ¬LED0=0;
 8000f50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f54:	4814      	ldr	r0, [pc, #80]	; (8000fa8 <main+0x90>)

// not much compiler optimizer settings dependent

{

	float x=50.0f;
 8000f56:	4c15      	ldr	r4, [pc, #84]	; (8000fac <main+0x94>)
	while(1)

	{


	GPIO_ResetBits(GPIOF,GPIO_Pin_9);  //LED0¶ÔÓŠÒýœÅGPIOF.9À­µÍ£¬ÁÁ  µÈÍ¬LED0=0;
 8000f58:	f7ff fa90 	bl	800047c <GPIO_ResetBits>

	GPIO_SetBits(GPIOF,GPIO_Pin_10);   //LED1¶ÔÓŠÒýœÅGPIOF.10À­žß£¬Ãð µÈÍ¬LED1=1;
 8000f5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f60:	4811      	ldr	r0, [pc, #68]	; (8000fa8 <main+0x90>)
 8000f62:	f7ff fa89 	bl	8000478 <GPIO_SetBits>

	float x=50.0f;

	while (x > 0.0001f)

		x = x/1.0001f; // delay loop
 8000f66:	4620      	mov	r0, r4
 8000f68:	4911      	ldr	r1, [pc, #68]	; (8000fb0 <main+0x98>)
 8000f6a:	f7ff fe29 	bl	8000bc0 <__aeabi_fdiv>

{

	float x=50.0f;

	while (x > 0.0001f)
 8000f6e:	4911      	ldr	r1, [pc, #68]	; (8000fb4 <main+0x9c>)

		x = x/1.0001f; // delay loop
 8000f70:	4604      	mov	r4, r0

{

	float x=50.0f;

	while (x > 0.0001f)
 8000f72:	f7ff ff2d 	bl	8000dd0 <__aeabi_fcmpgt>
 8000f76:	2800      	cmp	r0, #0
 8000f78:	d1f5      	bne.n	8000f66 <main+0x4e>
	GPIO_SetBits(GPIOF,GPIO_Pin_10);   //LED1¶ÔÓŠÒýœÅGPIOF.10À­žß£¬Ãð µÈÍ¬LED1=1;


	DelayByDiv(); // delay --> not much compiler optimizer settings dependent

	GPIO_SetBits(GPIOF,GPIO_Pin_9);	   //LED0¶ÔÓŠÒýœÅGPIOF.0À­žß£¬Ãð  µÈÍ¬LED0=1;
 8000f7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7e:	480a      	ldr	r0, [pc, #40]	; (8000fa8 <main+0x90>)

// not much compiler optimizer settings dependent

{

	float x=50.0f;
 8000f80:	4c0a      	ldr	r4, [pc, #40]	; (8000fac <main+0x94>)
	GPIO_SetBits(GPIOF,GPIO_Pin_10);   //LED1¶ÔÓŠÒýœÅGPIOF.10À­žß£¬Ãð µÈÍ¬LED1=1;


	DelayByDiv(); // delay --> not much compiler optimizer settings dependent

	GPIO_SetBits(GPIOF,GPIO_Pin_9);	   //LED0¶ÔÓŠÒýœÅGPIOF.0À­žß£¬Ãð  µÈÍ¬LED0=1;
 8000f82:	f7ff fa79 	bl	8000478 <GPIO_SetBits>

	GPIO_ResetBits(GPIOF,GPIO_Pin_10); //LED1¶ÔÓŠÒýœÅGPIOF.10À­µÍ£¬ÁÁ µÈÍ¬LED1=0;
 8000f86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f8a:	4807      	ldr	r0, [pc, #28]	; (8000fa8 <main+0x90>)
 8000f8c:	f7ff fa76 	bl	800047c <GPIO_ResetBits>

	float x=50.0f;

	while (x > 0.0001f)

		x = x/1.0001f; // delay loop
 8000f90:	4620      	mov	r0, r4
 8000f92:	4907      	ldr	r1, [pc, #28]	; (8000fb0 <main+0x98>)
 8000f94:	f7ff fe14 	bl	8000bc0 <__aeabi_fdiv>

{

	float x=50.0f;

	while (x > 0.0001f)
 8000f98:	4906      	ldr	r1, [pc, #24]	; (8000fb4 <main+0x9c>)

		x = x/1.0001f; // delay loop
 8000f9a:	4604      	mov	r4, r0

{

	float x=50.0f;

	while (x > 0.0001f)
 8000f9c:	f7ff ff18 	bl	8000dd0 <__aeabi_fcmpgt>
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	d1f5      	bne.n	8000f90 <main+0x78>
 8000fa4:	e7d4      	b.n	8000f50 <main+0x38>
 8000fa6:	bf00      	nop
 8000fa8:	40021400 	.word	0x40021400
 8000fac:	42480000 	.word	0x42480000
 8000fb0:	3f800347 	.word	0x3f800347
 8000fb4:	38d1b717 	.word	0x38d1b717

08000fb8 <memset>:
 8000fb8:	b470      	push	{r4, r5, r6}
 8000fba:	0784      	lsls	r4, r0, #30
 8000fbc:	d046      	beq.n	800104c <memset+0x94>
 8000fbe:	1e54      	subs	r4, r2, #1
 8000fc0:	2a00      	cmp	r2, #0
 8000fc2:	d041      	beq.n	8001048 <memset+0x90>
 8000fc4:	b2cd      	uxtb	r5, r1
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	e002      	b.n	8000fd0 <memset+0x18>
 8000fca:	1e62      	subs	r2, r4, #1
 8000fcc:	b3e4      	cbz	r4, 8001048 <memset+0x90>
 8000fce:	4614      	mov	r4, r2
 8000fd0:	f803 5b01 	strb.w	r5, [r3], #1
 8000fd4:	079a      	lsls	r2, r3, #30
 8000fd6:	d1f8      	bne.n	8000fca <memset+0x12>
 8000fd8:	2c03      	cmp	r4, #3
 8000fda:	d92e      	bls.n	800103a <memset+0x82>
 8000fdc:	b2cd      	uxtb	r5, r1
 8000fde:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000fe2:	2c0f      	cmp	r4, #15
 8000fe4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000fe8:	d919      	bls.n	800101e <memset+0x66>
 8000fea:	f103 0210 	add.w	r2, r3, #16
 8000fee:	4626      	mov	r6, r4
 8000ff0:	3e10      	subs	r6, #16
 8000ff2:	2e0f      	cmp	r6, #15
 8000ff4:	f842 5c10 	str.w	r5, [r2, #-16]
 8000ff8:	f842 5c0c 	str.w	r5, [r2, #-12]
 8000ffc:	f842 5c08 	str.w	r5, [r2, #-8]
 8001000:	f842 5c04 	str.w	r5, [r2, #-4]
 8001004:	f102 0210 	add.w	r2, r2, #16
 8001008:	d8f2      	bhi.n	8000ff0 <memset+0x38>
 800100a:	f1a4 0210 	sub.w	r2, r4, #16
 800100e:	f022 020f 	bic.w	r2, r2, #15
 8001012:	f004 040f 	and.w	r4, r4, #15
 8001016:	3210      	adds	r2, #16
 8001018:	2c03      	cmp	r4, #3
 800101a:	4413      	add	r3, r2
 800101c:	d90d      	bls.n	800103a <memset+0x82>
 800101e:	461e      	mov	r6, r3
 8001020:	4622      	mov	r2, r4
 8001022:	3a04      	subs	r2, #4
 8001024:	2a03      	cmp	r2, #3
 8001026:	f846 5b04 	str.w	r5, [r6], #4
 800102a:	d8fa      	bhi.n	8001022 <memset+0x6a>
 800102c:	1f22      	subs	r2, r4, #4
 800102e:	f022 0203 	bic.w	r2, r2, #3
 8001032:	3204      	adds	r2, #4
 8001034:	4413      	add	r3, r2
 8001036:	f004 0403 	and.w	r4, r4, #3
 800103a:	b12c      	cbz	r4, 8001048 <memset+0x90>
 800103c:	b2c9      	uxtb	r1, r1
 800103e:	441c      	add	r4, r3
 8001040:	f803 1b01 	strb.w	r1, [r3], #1
 8001044:	42a3      	cmp	r3, r4
 8001046:	d1fb      	bne.n	8001040 <memset+0x88>
 8001048:	bc70      	pop	{r4, r5, r6}
 800104a:	4770      	bx	lr
 800104c:	4614      	mov	r4, r2
 800104e:	4603      	mov	r3, r0
 8001050:	e7c2      	b.n	8000fd8 <memset+0x20>
 8001052:	bf00      	nop
