
main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <Default_Handler>:
#pragma weak DMA2_Channel2_IRQHandler	= Default_Handler
#pragma weak DMA2_Channel3_IRQHandler	= Default_Handler
#pragma weak DMA2_Channel4_5_IRQHandler	= Default_Handler

void Default_Handler(void)
{
 8000000:	e7fe      	b.n	8000000 <Default_Handler>
 8000002:	bf00      	nop

08000004 <Reset_Handler>:
	/* zero the bss segment */
	dst = &_sbss;
	while(dst < &_ebss)
		*(dst++) = 0;
}
void Reset_Handler(void) {
 8000004:	4668      	mov	r0, sp
 8000006:	f020 0107 	bic.w	r1, r0, #7
 800000a:	468d      	mov	sp, r1
void __Init_Data(void) {
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
 800000c:	4814      	ldr	r0, [pc, #80]	; (8000060 <Reset_Handler+0x5c>)
 800000e:	4915      	ldr	r1, [pc, #84]	; (8000064 <Reset_Handler+0x60>)
 8000010:	4281      	cmp	r1, r0
	/* zero the bss segment */
	dst = &_sbss;
	while(dst < &_ebss)
		*(dst++) = 0;
}
void Reset_Handler(void) {
 8000012:	b508      	push	{r3, lr}
void __Init_Data(void) {
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
 8000014:	d009      	beq.n	800002a <Reset_Handler+0x26>
		while(dst < &_edata)
 8000016:	4b14      	ldr	r3, [pc, #80]	; (8000068 <Reset_Handler+0x64>)
 8000018:	4298      	cmp	r0, r3
 800001a:	d206      	bcs.n	800002a <Reset_Handler+0x26>
 800001c:	43c2      	mvns	r2, r0
 800001e:	4413      	add	r3, r2
 8000020:	f023 0203 	bic.w	r2, r3, #3
 8000024:	3204      	adds	r2, #4
 8000026:	f001 f8ed 	bl	8001204 <memcpy>
			*(dst++) = *(src++);
	/* zero the bss segment */
	dst = &_sbss;
	while(dst < &_ebss)
 800002a:	4810      	ldr	r0, [pc, #64]	; (800006c <Reset_Handler+0x68>)
 800002c:	4b10      	ldr	r3, [pc, #64]	; (8000070 <Reset_Handler+0x6c>)
 800002e:	4298      	cmp	r0, r3
 8000030:	d207      	bcs.n	8000042 <Reset_Handler+0x3e>
 8000032:	43c2      	mvns	r2, r0
 8000034:	4413      	add	r3, r2
 8000036:	f023 0203 	bic.w	r2, r3, #3
 800003a:	3204      	adds	r2, #4
 800003c:	2100      	movs	r1, #0
 800003e:	f001 f989 	bl	8001354 <memset>
		*(dst++) = 0;
}
void Reset_Handler(void) {
	__Init_Data(); /* Initialize memory, data and bss */
	extern u32 _isr_vectors_offs; /* the offset to the vector table in ram */
	SCB->VTOR = 0x08000000 | ((u32)&_isr_vectors_offs & (u32)0x1FFFFF80); /* set interrupt vector table address */
 8000042:	4b0c      	ldr	r3, [pc, #48]	; (8000074 <Reset_Handler+0x70>)
 8000044:	4a0c      	ldr	r2, [pc, #48]	; (8000078 <Reset_Handler+0x74>)
 8000046:	f023 4368 	bic.w	r3, r3, #3892314112	; 0xe8000000
 800004a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800004e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000052:	6093      	str	r3, [r2, #8]
	SystemInit(); /* configure the clock */
 8000054:	f000 f966 	bl	8000324 <SystemInit>
	main(); /* start execution of the program */
 8000058:	f001 f96e 	bl	8001338 <main>
 800005c:	e7fe      	b.n	800005c <Reset_Handler+0x58>
 800005e:	bf00      	nop
 8000060:	20000000 	.word	0x20000000
 8000064:	080013f0 	.word	0x080013f0
 8000068:	20000024 	.word	0x20000024
 800006c:	20000024 	.word	0x20000024
 8000070:	2000015c 	.word	0x2000015c
 8000074:	000013f0 	.word	0x000013f0
 8000078:	e000ed00 	.word	0xe000ed00

0800007c <__Init_Data>:
void __Init_Data(void) {
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
 800007c:	490e      	ldr	r1, [pc, #56]	; (80000b8 <__Init_Data+0x3c>)
 800007e:	480f      	ldr	r0, [pc, #60]	; (80000bc <__Init_Data+0x40>)
 8000080:	4281      	cmp	r1, r0
 0, 0, 0, 0, 0,
 0, 0, 0,
 (intfunc)0xF1E0F85F
/* @0x1E0. This is for boot in RAM mode for STM32F10x High Density devices. */
};
void __Init_Data(void) {
 8000082:	b508      	push	{r3, lr}
	unsigned long *src, *dst;
	/* copy the data segment into ram */
	src = &_sidata;
	dst = &_sdata;
	if (src != dst)
 8000084:	d009      	beq.n	800009a <__Init_Data+0x1e>
		while(dst < &_edata)
 8000086:	4b0e      	ldr	r3, [pc, #56]	; (80000c0 <__Init_Data+0x44>)
 8000088:	4298      	cmp	r0, r3
 800008a:	d206      	bcs.n	800009a <__Init_Data+0x1e>
 800008c:	43c2      	mvns	r2, r0
 800008e:	441a      	add	r2, r3
 8000090:	f022 0203 	bic.w	r2, r2, #3
 8000094:	3204      	adds	r2, #4
 8000096:	f001 f8b5 	bl	8001204 <memcpy>
			*(dst++) = *(src++);
	/* zero the bss segment */
	dst = &_sbss;
	while(dst < &_ebss)
 800009a:	480a      	ldr	r0, [pc, #40]	; (80000c4 <__Init_Data+0x48>)
 800009c:	4b0a      	ldr	r3, [pc, #40]	; (80000c8 <__Init_Data+0x4c>)
 800009e:	4298      	cmp	r0, r3
 80000a0:	d209      	bcs.n	80000b6 <__Init_Data+0x3a>
 80000a2:	43c2      	mvns	r2, r0
 80000a4:	441a      	add	r2, r3
 80000a6:	f022 0203 	bic.w	r2, r2, #3
 80000aa:	3204      	adds	r2, #4
 80000ac:	2100      	movs	r1, #0
		*(dst++) = 0;
}
 80000ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80000b2:	f001 b94f 	b.w	8001354 <memset>
 80000b6:	bd08      	pop	{r3, pc}
 80000b8:	080013f0 	.word	0x080013f0
 80000bc:	20000000 	.word	0x20000000
 80000c0:	20000024 	.word	0x20000024
 80000c4:	20000024 	.word	0x20000024
 80000c8:	2000015c 	.word	0x2000015c

080000cc <delay_init>:
//初始化延迟函数
//当使用OS的时候,此函数会初始化OS的时钟节拍
//SYSTICK的时钟固定为AHB时钟的1/8
//SYSCLK:系统时钟频率
void delay_init(u8 SYSCLK)
{
 80000cc:	b510      	push	{r4, lr}
 80000ce:	4604      	mov	r4, r0
#if SYSTEM_SUPPORT_OS 						//如果需要支持OS.
	u32 reload;
#endif
 	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8); 
 80000d0:	f06f 0004 	mvn.w	r0, #4
 80000d4:	f000 fa32 	bl	800053c <SysTick_CLKSourceConfig>
	fac_us=SYSCLK/8;						//不论是否使用OS,fac_us都需要使用
 80000d8:	08e0      	lsrs	r0, r4, #3
 80000da:	4a04      	ldr	r2, [pc, #16]	; (80000ec <delay_init+0x20>)
	fac_ms=1000/delay_ostickspersec;		//代表OS可以延时的最少单位	   
	SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk;   	//开启SYSTICK中断
	SysTick->LOAD=reload; 					//每1/delay_ostickspersec秒中断一次	
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk; 	//开启SYSTICK    
#else
	fac_ms=(u16)fac_us*1000;				//非OS下,代表每个ms需要的systick时钟数   
 80000dc:	ebc0 1340 	rsb	r3, r0, r0, lsl #5
 80000e0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80000e4:	00db      	lsls	r3, r3, #3
{
#if SYSTEM_SUPPORT_OS 						//如果需要支持OS.
	u32 reload;
#endif
 	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8); 
	fac_us=SYSCLK/8;						//不论是否使用OS,fac_us都需要使用
 80000e6:	7010      	strb	r0, [r2, #0]
	fac_ms=1000/delay_ostickspersec;		//代表OS可以延时的最少单位	   
	SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk;   	//开启SYSTICK中断
	SysTick->LOAD=reload; 					//每1/delay_ostickspersec秒中断一次	
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk; 	//开启SYSTICK    
#else
	fac_ms=(u16)fac_us*1000;				//非OS下,代表每个ms需要的systick时钟数   
 80000e8:	8053      	strh	r3, [r2, #2]
{
#if SYSTEM_SUPPORT_OS 						//如果需要支持OS.
	u32 reload;
#endif
 	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8); 
	fac_us=SYSCLK/8;						//不论是否使用OS,fac_us都需要使用
 80000ea:	bd10      	pop	{r4, pc}
 80000ec:	20000024 	.word	0x20000024

080000f0 <delay_us>:
//nus为要延时的us数.	
//注意:nus的值,不要大于798915us(最大值即2^24/fac_us@fac_us=21)
void delay_us(u32 nus)
{		
	u32 temp;	    	 
	SysTick->LOAD=nus*fac_us; 				//时间加载	  		 
 80000f0:	4b0c      	ldr	r3, [pc, #48]	; (8000124 <delay_us+0x34>)
 80000f2:	4a0d      	ldr	r2, [pc, #52]	; (8000128 <delay_us+0x38>)
 80000f4:	781b      	ldrb	r3, [r3, #0]
	SysTick->VAL=0x00;        				//清空计数器
 80000f6:	2100      	movs	r1, #0
//nus为要延时的us数.	
//注意:nus的值,不要大于798915us(最大值即2^24/fac_us@fac_us=21)
void delay_us(u32 nus)
{		
	u32 temp;	    	 
	SysTick->LOAD=nus*fac_us; 				//时间加载	  		 
 80000f8:	fb00 f003 	mul.w	r0, r0, r3
 80000fc:	6050      	str	r0, [r2, #4]
	SysTick->VAL=0x00;        				//清空计数器
 80000fe:	6091      	str	r1, [r2, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk ; //开始倒数 	 
 8000100:	6813      	ldr	r3, [r2, #0]
 8000102:	f043 0301 	orr.w	r3, r3, #1
 8000106:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 8000108:	6813      	ldr	r3, [r2, #0]
 800010a:	4907      	ldr	r1, [pc, #28]	; (8000128 <delay_us+0x38>)
	}while((temp&0x01)&&!(temp&(1<<16)));	//等待时间到达   
 800010c:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 8000110:	2b01      	cmp	r3, #1
 8000112:	d0f9      	beq.n	8000108 <delay_us+0x18>
	SysTick->CTRL&=~SysTick_CTRL_ENABLE_Msk; //关闭计数器
 8000114:	680b      	ldr	r3, [r1, #0]
	SysTick->VAL =0X00;       				//清空计数器 
 8000116:	2200      	movs	r2, #0
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk ; //开始倒数 	 
	do
	{
		temp=SysTick->CTRL;
	}while((temp&0x01)&&!(temp&(1<<16)));	//等待时间到达   
	SysTick->CTRL&=~SysTick_CTRL_ENABLE_Msk; //关闭计数器
 8000118:	f023 0301 	bic.w	r3, r3, #1
 800011c:	600b      	str	r3, [r1, #0]
	SysTick->VAL =0X00;       				//清空计数器 
 800011e:	608a      	str	r2, [r1, #8]
 8000120:	4770      	bx	lr
 8000122:	bf00      	nop
 8000124:	20000024 	.word	0x20000024
 8000128:	e000e010 	.word	0xe000e010

0800012c <delay_xms>:
//SYSCLK单位为Hz,nms单位为ms
//对168M条件下,nms<=798ms 
void delay_xms(u16 nms)
{	 		  	  
	u32 temp;		   
	SysTick->LOAD=(u32)nms*fac_ms;			//时间加载(SysTick->LOAD为24bit)
 800012c:	4b0c      	ldr	r3, [pc, #48]	; (8000160 <delay_xms+0x34>)
 800012e:	4a0d      	ldr	r2, [pc, #52]	; (8000164 <delay_xms+0x38>)
 8000130:	885b      	ldrh	r3, [r3, #2]
	SysTick->VAL =0x00;           			//清空计数器
 8000132:	2100      	movs	r1, #0
//SYSCLK单位为Hz,nms单位为ms
//对168M条件下,nms<=798ms 
void delay_xms(u16 nms)
{	 		  	  
	u32 temp;		   
	SysTick->LOAD=(u32)nms*fac_ms;			//时间加载(SysTick->LOAD为24bit)
 8000134:	fb00 f003 	mul.w	r0, r0, r3
 8000138:	6050      	str	r0, [r2, #4]
	SysTick->VAL =0x00;           			//清空计数器
 800013a:	6091      	str	r1, [r2, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk ;          //开始倒数 
 800013c:	6813      	ldr	r3, [r2, #0]
 800013e:	f043 0301 	orr.w	r3, r3, #1
 8000142:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 8000144:	6813      	ldr	r3, [r2, #0]
 8000146:	4907      	ldr	r1, [pc, #28]	; (8000164 <delay_xms+0x38>)
	}while((temp&0x01)&&!(temp&(1<<16)));	//等待时间到达   
 8000148:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 800014c:	2b01      	cmp	r3, #1
 800014e:	d0f9      	beq.n	8000144 <delay_xms+0x18>
	SysTick->CTRL&=~SysTick_CTRL_ENABLE_Msk;       //关闭计数器
 8000150:	680b      	ldr	r3, [r1, #0]
	SysTick->VAL =0X00;     		  		//清空计数器	  	    
 8000152:	2200      	movs	r2, #0
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk ;          //开始倒数 
	do
	{
		temp=SysTick->CTRL;
	}while((temp&0x01)&&!(temp&(1<<16)));	//等待时间到达   
	SysTick->CTRL&=~SysTick_CTRL_ENABLE_Msk;       //关闭计数器
 8000154:	f023 0301 	bic.w	r3, r3, #1
 8000158:	600b      	str	r3, [r1, #0]
	SysTick->VAL =0X00;     		  		//清空计数器	  	    
 800015a:	608a      	str	r2, [r1, #8]
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	20000024 	.word	0x20000024
 8000164:	e000e010 	.word	0xe000e010

08000168 <delay_ms>:
} 
//延时nms 
//nms:0~65535
void delay_ms(u16 nms)
{	 	 
	u8 repeat=nms/540;						//这里用540,是考虑到某些客户可能超频使用,
 8000168:	4b21      	ldr	r3, [pc, #132]	; (80001f0 <delay_ms+0x88>)
 800016a:	fba3 2300 	umull	r2, r3, r3, r0
 800016e:	0a5a      	lsrs	r2, r3, #9
											//比如超频到248M的时候,delay_xms最大只能延时541ms左右了
	u16 remain=nms%540;
 8000170:	f44f 7307 	mov.w	r3, #540	; 0x21c
	SysTick->VAL =0X00;     		  		//清空计数器	  	    
} 
//延时nms 
//nms:0~65535
void delay_ms(u16 nms)
{	 	 
 8000174:	b470      	push	{r4, r5, r6}
	u8 repeat=nms/540;						//这里用540,是考虑到某些客户可能超频使用,
 8000176:	b294      	uxth	r4, r2
											//比如超频到248M的时候,delay_xms最大只能延时541ms左右了
	u16 remain=nms%540;
 8000178:	fb03 0212 	mls	r2, r3, r2, r0
 800017c:	b296      	uxth	r6, r2
	while(repeat)
 800017e:	b1dc      	cbz	r4, 80001b8 <delay_ms+0x50>
 8000180:	481c      	ldr	r0, [pc, #112]	; (80001f4 <delay_ms+0x8c>)
//SYSCLK单位为Hz,nms单位为ms
//对168M条件下,nms<=798ms 
void delay_xms(u16 nms)
{	 		  	  
	u32 temp;		   
	SysTick->LOAD=(u32)nms*fac_ms;			//时间加载(SysTick->LOAD为24bit)
 8000182:	4a1d      	ldr	r2, [pc, #116]	; (80001f8 <delay_ms+0x90>)
 8000184:	8845      	ldrh	r5, [r0, #2]
 8000186:	b2e1      	uxtb	r1, r4
	SysTick->VAL =0x00;           			//清空计数器
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk ;          //开始倒数 
	do
	{
		temp=SysTick->CTRL;
 8000188:	4610      	mov	r0, r2
 800018a:	fb03 f505 	mul.w	r5, r3, r5
//对168M条件下,nms<=798ms 
void delay_xms(u16 nms)
{	 		  	  
	u32 temp;		   
	SysTick->LOAD=(u32)nms*fac_ms;			//时间加载(SysTick->LOAD为24bit)
	SysTick->VAL =0x00;           			//清空计数器
 800018e:	2400      	movs	r4, #0
//SYSCLK单位为Hz,nms单位为ms
//对168M条件下,nms<=798ms 
void delay_xms(u16 nms)
{	 		  	  
	u32 temp;		   
	SysTick->LOAD=(u32)nms*fac_ms;			//时间加载(SysTick->LOAD为24bit)
 8000190:	6055      	str	r5, [r2, #4]
	SysTick->VAL =0x00;           			//清空计数器
 8000192:	6094      	str	r4, [r2, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk ;          //开始倒数 
 8000194:	6813      	ldr	r3, [r2, #0]
 8000196:	f043 0301 	orr.w	r3, r3, #1
 800019a:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 800019c:	6813      	ldr	r3, [r2, #0]
	}while((temp&0x01)&&!(temp&(1<<16)));	//等待时间到达   
 800019e:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 80001a2:	2b01      	cmp	r3, #1
 80001a4:	d0fa      	beq.n	800019c <delay_ms+0x34>
	SysTick->CTRL&=~SysTick_CTRL_ENABLE_Msk;       //关闭计数器
 80001a6:	6803      	ldr	r3, [r0, #0]
											//比如超频到248M的时候,delay_xms最大只能延时541ms左右了
	u16 remain=nms%540;
	while(repeat)
	{
		delay_xms(540);
		repeat--;
 80001a8:	3901      	subs	r1, #1
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk ;          //开始倒数 
	do
	{
		temp=SysTick->CTRL;
	}while((temp&0x01)&&!(temp&(1<<16)));	//等待时间到达   
	SysTick->CTRL&=~SysTick_CTRL_ENABLE_Msk;       //关闭计数器
 80001aa:	f023 0301 	bic.w	r3, r3, #1
void delay_ms(u16 nms)
{	 	 
	u8 repeat=nms/540;						//这里用540,是考虑到某些客户可能超频使用,
											//比如超频到248M的时候,delay_xms最大只能延时541ms左右了
	u16 remain=nms%540;
	while(repeat)
 80001ae:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk ;          //开始倒数 
	do
	{
		temp=SysTick->CTRL;
	}while((temp&0x01)&&!(temp&(1<<16)));	//等待时间到达   
	SysTick->CTRL&=~SysTick_CTRL_ENABLE_Msk;       //关闭计数器
 80001b2:	6003      	str	r3, [r0, #0]
	SysTick->VAL =0X00;     		  		//清空计数器	  	    
 80001b4:	6084      	str	r4, [r0, #8]
void delay_ms(u16 nms)
{	 	 
	u8 repeat=nms/540;						//这里用540,是考虑到某些客户可能超频使用,
											//比如超频到248M的时候,delay_xms最大只能延时541ms左右了
	u16 remain=nms%540;
	while(repeat)
 80001b6:	d1eb      	bne.n	8000190 <delay_ms+0x28>
	{
		delay_xms(540);
		repeat--;
	}
	if(remain)delay_xms(remain);
 80001b8:	b1be      	cbz	r6, 80001ea <delay_ms+0x82>
//SYSCLK单位为Hz,nms单位为ms
//对168M条件下,nms<=798ms 
void delay_xms(u16 nms)
{	 		  	  
	u32 temp;		   
	SysTick->LOAD=(u32)nms*fac_ms;			//时间加载(SysTick->LOAD为24bit)
 80001ba:	4b0e      	ldr	r3, [pc, #56]	; (80001f4 <delay_ms+0x8c>)
 80001bc:	4a0e      	ldr	r2, [pc, #56]	; (80001f8 <delay_ms+0x90>)
 80001be:	8859      	ldrh	r1, [r3, #2]
	SysTick->VAL =0x00;           			//清空计数器
 80001c0:	2300      	movs	r3, #0
//SYSCLK单位为Hz,nms单位为ms
//对168M条件下,nms<=798ms 
void delay_xms(u16 nms)
{	 		  	  
	u32 temp;		   
	SysTick->LOAD=(u32)nms*fac_ms;			//时间加载(SysTick->LOAD为24bit)
 80001c2:	fb06 f601 	mul.w	r6, r6, r1
 80001c6:	6056      	str	r6, [r2, #4]
	SysTick->VAL =0x00;           			//清空计数器
 80001c8:	6093      	str	r3, [r2, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk ;          //开始倒数 
 80001ca:	6813      	ldr	r3, [r2, #0]
 80001cc:	f043 0301 	orr.w	r3, r3, #1
 80001d0:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 80001d2:	6813      	ldr	r3, [r2, #0]
 80001d4:	4908      	ldr	r1, [pc, #32]	; (80001f8 <delay_ms+0x90>)
	}while((temp&0x01)&&!(temp&(1<<16)));	//等待时间到达   
 80001d6:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 80001da:	2b01      	cmp	r3, #1
 80001dc:	d0f9      	beq.n	80001d2 <delay_ms+0x6a>
	SysTick->CTRL&=~SysTick_CTRL_ENABLE_Msk;       //关闭计数器
 80001de:	680b      	ldr	r3, [r1, #0]
	SysTick->VAL =0X00;     		  		//清空计数器	  	    
 80001e0:	2200      	movs	r2, #0
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk ;          //开始倒数 
	do
	{
		temp=SysTick->CTRL;
	}while((temp&0x01)&&!(temp&(1<<16)));	//等待时间到达   
	SysTick->CTRL&=~SysTick_CTRL_ENABLE_Msk;       //关闭计数器
 80001e2:	f023 0301 	bic.w	r3, r3, #1
 80001e6:	600b      	str	r3, [r1, #0]
	SysTick->VAL =0X00;     		  		//清空计数器	  	    
 80001e8:	608a      	str	r2, [r1, #8]
	{
		delay_xms(540);
		repeat--;
	}
	if(remain)delay_xms(remain);
} 
 80001ea:	bc70      	pop	{r4, r5, r6}
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	f2b9d649 	.word	0xf2b9d649
 80001f4:	20000024 	.word	0x20000024
 80001f8:	e000e010 	.word	0xe000e010

080001fc <_sys_exit>:
}; 

FILE __stdout;       
//定义_sys_exit()以避免使用半主机模式    
void _sys_exit(int x) 
{ 
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop

08000200 <fputc>:
	x = x; 
} 
//重定义fputc函数 
int fputc(int ch, FILE *f)
{ 	
	while((USART1->SR&0X40)==0);//循环发送,直到发送完毕   
 8000200:	4903      	ldr	r1, [pc, #12]	; (8000210 <fputc+0x10>)
 8000202:	880b      	ldrh	r3, [r1, #0]
 8000204:	4a02      	ldr	r2, [pc, #8]	; (8000210 <fputc+0x10>)
 8000206:	065b      	lsls	r3, r3, #25
 8000208:	d5fb      	bpl.n	8000202 <fputc+0x2>
	USART1->DR = (u8) ch;      
 800020a:	b2c3      	uxtb	r3, r0
 800020c:	8093      	strh	r3, [r2, #4]
	return ch;
}
 800020e:	4770      	bx	lr
 8000210:	40011000 	.word	0x40011000

08000214 <uart_init>:
//bit13~0，	接收到的有效字节数目
u16 USART_RX_STA=0;       //接收状态标记	

//初始化IO 串口1 
//bound:波特率
void uart_init(u32 bound){
 8000214:	b5f0      	push	{r4, r5, r6, r7, lr}
   //GPIO端口设置
  GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE); //使能GPIOA时钟
 8000216:	2101      	movs	r1, #1
//bit13~0，	接收到的有效字节数目
u16 USART_RX_STA=0;       //接收状态标记	

//初始化IO 串口1 
//bound:波特率
void uart_init(u32 bound){
 8000218:	b089      	sub	sp, #36	; 0x24
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE); //使能GPIOA时钟
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);//使能USART1时钟
 
	//串口1对应引脚复用映射
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1); //GPIOA9复用为USART1
 800021a:	4d27      	ldr	r5, [pc, #156]	; (80002b8 <uart_init+0xa4>)
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式
	USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位
	USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;	//收发模式
  USART_Init(USART1, &USART_InitStructure); //初始化串口1
 800021c:	4e27      	ldr	r6, [pc, #156]	; (80002bc <uart_init+0xa8>)
//bit13~0，	接收到的有效字节数目
u16 USART_RX_STA=0;       //接收状态标记	

//初始化IO 串口1 
//bound:波特率
void uart_init(u32 bound){
 800021e:	4607      	mov	r7, r0
   //GPIO端口设置
  GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE); //使能GPIOA时钟
 8000220:	4608      	mov	r0, r1
 8000222:	f000 fc99 	bl	8000b58 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);//使能USART1时钟
 8000226:	2101      	movs	r1, #1
 8000228:	2010      	movs	r0, #16
 800022a:	f000 fccd 	bl	8000bc8 <RCC_APB2PeriphClockCmd>
 
	//串口1对应引脚复用映射
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1); //GPIOA9复用为USART1
 800022e:	4628      	mov	r0, r5
 8000230:	2207      	movs	r2, #7
 8000232:	2109      	movs	r1, #9
 8000234:	f000 face 	bl	80007d4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1); //GPIOA10复用为USART1
 8000238:	4628      	mov	r0, r5
 800023a:	2207      	movs	r2, #7
 800023c:	210a      	movs	r1, #10
 800023e:	f000 fac9 	bl	80007d4 <GPIO_PinAFConfig>
	
	//USART1端口配置
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10; //GPIOA9与GPIOA10
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//复用功能
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	//速度50MHz
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //推挽复用输出
 8000242:	2400      	movs	r4, #0
	//串口1对应引脚复用映射
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1); //GPIOA9复用为USART1
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1); //GPIOA10复用为USART1
	
	//USART1端口配置
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10; //GPIOA9与GPIOA10
 8000244:	f44f 62c0 	mov.w	r2, #1536	; 0x600
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//复用功能
 8000248:	2302      	movs	r3, #2
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	//速度50MHz
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //推挽复用输出
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP; //上拉
	GPIO_Init(GPIOA,&GPIO_InitStructure); //初始化PA9，PA10
 800024a:	4628      	mov	r0, r5
 800024c:	a902      	add	r1, sp, #8
	//USART1端口配置
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10; //GPIOA9与GPIOA10
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//复用功能
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	//速度50MHz
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //推挽复用输出
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP; //上拉
 800024e:	2501      	movs	r5, #1
	//串口1对应引脚复用映射
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1); //GPIOA9复用为USART1
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1); //GPIOA10复用为USART1
	
	//USART1端口配置
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10; //GPIOA9与GPIOA10
 8000250:	9202      	str	r2, [sp, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//复用功能
 8000252:	f88d 300c 	strb.w	r3, [sp, #12]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	//速度50MHz
 8000256:	f88d 300d 	strb.w	r3, [sp, #13]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //推挽复用输出
 800025a:	f88d 400e 	strb.w	r4, [sp, #14]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP; //上拉
 800025e:	f88d 500f 	strb.w	r5, [sp, #15]
	GPIO_Init(GPIOA,&GPIO_InitStructure); //初始化PA9，PA10
 8000262:	f000 fa25 	bl	80006b0 <GPIO_Init>
	USART_InitStructure.USART_BaudRate = bound;//波特率设置
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式
	USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位
	USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;	//收发模式
 8000266:	230c      	movs	r3, #12
  USART_Init(USART1, &USART_InitStructure); //初始化串口1
 8000268:	4630      	mov	r0, r6
 800026a:	a904      	add	r1, sp, #16
	USART_InitStructure.USART_BaudRate = bound;//波特率设置
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式
	USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位
	USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;	//收发模式
 800026c:	f8ad 301a 	strh.w	r3, [sp, #26]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //推挽复用输出
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP; //上拉
	GPIO_Init(GPIOA,&GPIO_InitStructure); //初始化PA9，PA10

   //USART1 初始化设置
	USART_InitStructure.USART_BaudRate = bound;//波特率设置
 8000270:	9704      	str	r7, [sp, #16]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式
 8000272:	f8ad 4014 	strh.w	r4, [sp, #20]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位
 8000276:	f8ad 4016 	strh.w	r4, [sp, #22]
	USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位
 800027a:	f8ad 4018 	strh.w	r4, [sp, #24]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制
 800027e:	f8ad 401c 	strh.w	r4, [sp, #28]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;	//收发模式
  USART_Init(USART1, &USART_InitStructure); //初始化串口1
 8000282:	f000 fe0d 	bl	8000ea0 <USART_Init>
	
  USART_Cmd(USART1, ENABLE);  //使能串口1 
 8000286:	4629      	mov	r1, r5
 8000288:	4630      	mov	r0, r6
 800028a:	f000 fe8f 	bl	8000fac <USART_Cmd>
	
	//USART_ClearFlag(USART1, USART_FLAG_TC);
	
#if EN_USART1_RX	
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);//开启相关中断
 800028e:	462a      	mov	r2, r5
 8000290:	4630      	mov	r0, r6
 8000292:	f240 5125 	movw	r1, #1317	; 0x525
 8000296:	f000 ff63 	bl	8001160 <USART_ITConfig>

	//Usart1 NVIC 配置
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;//串口1中断通道
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=3;//抢占优先级3
 800029a:	2303      	movs	r3, #3
	
#if EN_USART1_RX	
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);//开启相关中断

	//Usart1 NVIC 配置
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;//串口1中断通道
 800029c:	2225      	movs	r2, #37	; 0x25
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=3;//抢占优先级3
	NVIC_InitStructure.NVIC_IRQChannelSubPriority =3;		//子优先级3
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			//IRQ通道使能
	NVIC_Init(&NVIC_InitStructure);	//根据指定的参数初始化VIC寄存器、
 800029e:	a801      	add	r0, sp, #4

	//Usart1 NVIC 配置
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;//串口1中断通道
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=3;//抢占优先级3
	NVIC_InitStructure.NVIC_IRQChannelSubPriority =3;		//子优先级3
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			//IRQ通道使能
 80002a0:	f88d 5007 	strb.w	r5, [sp, #7]
	
#if EN_USART1_RX	
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);//开启相关中断

	//Usart1 NVIC 配置
  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;//串口1中断通道
 80002a4:	f88d 2004 	strb.w	r2, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=3;//抢占优先级3
 80002a8:	f88d 3005 	strb.w	r3, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority =3;		//子优先级3
 80002ac:	f88d 3006 	strb.w	r3, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			//IRQ通道使能
	NVIC_Init(&NVIC_InitStructure);	//根据指定的参数初始化VIC寄存器、
 80002b0:	f000 f8f6 	bl	80004a0 <NVIC_Init>

#endif
	
}
 80002b4:	b009      	add	sp, #36	; 0x24
 80002b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002b8:	40020000 	.word	0x40020000
 80002bc:	40011000 	.word	0x40011000

080002c0 <USART1_IRQHandler>:


void USART1_IRQHandler(void)                	//串口1中断服务程序
{
 80002c0:	b510      	push	{r4, lr}
	u8 Res;
#if SYSTEM_SUPPORT_OS 		//如果SYSTEM_SUPPORT_OS为真，则需要支持OS.
	OSIntEnter();    
#endif
	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)  //接收中断(接收到的数据必须是0x0d 0x0a结尾)
 80002c2:	f240 5125 	movw	r1, #1317	; 0x525
 80002c6:	4814      	ldr	r0, [pc, #80]	; (8000318 <USART1_IRQHandler+0x58>)
 80002c8:	f000 ff70 	bl	80011ac <USART_GetITStatus>
 80002cc:	b900      	cbnz	r0, 80002d0 <USART1_IRQHandler+0x10>
 80002ce:	bd10      	pop	{r4, pc}
	{
		Res =USART_ReceiveData(USART1);//(USART1->DR);	//读取接收到的数据
 80002d0:	4811      	ldr	r0, [pc, #68]	; (8000318 <USART1_IRQHandler+0x58>)
 80002d2:	f000 fea3 	bl	800101c <USART_ReceiveData>
		
		if((USART_RX_STA&0x8000)==0)//接收未完成
 80002d6:	4a11      	ldr	r2, [pc, #68]	; (800031c <USART1_IRQHandler+0x5c>)
 80002d8:	8813      	ldrh	r3, [r2, #0]
 80002da:	041c      	lsls	r4, r3, #16
#if SYSTEM_SUPPORT_OS 		//如果SYSTEM_SUPPORT_OS为真，则需要支持OS.
	OSIntEnter();    
#endif
	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)  //接收中断(接收到的数据必须是0x0d 0x0a结尾)
	{
		Res =USART_ReceiveData(USART1);//(USART1->DR);	//读取接收到的数据
 80002dc:	b2c0      	uxtb	r0, r0
		
		if((USART_RX_STA&0x8000)==0)//接收未完成
 80002de:	d4f6      	bmi.n	80002ce <USART1_IRQHandler+0xe>
		{
			if(USART_RX_STA&0x4000)//接收到了0x0d
 80002e0:	0459      	lsls	r1, r3, #17
 80002e2:	d40d      	bmi.n	8000300 <USART1_IRQHandler+0x40>
				if(Res!=0x0a)USART_RX_STA=0;//接收错误,重新开始
				else USART_RX_STA|=0x8000;	//接收完成了 
			}
			else //还没收到0X0D
			{	
				if(Res==0x0d)USART_RX_STA|=0x4000;
 80002e4:	280d      	cmp	r0, #13
 80002e6:	d013      	beq.n	8000310 <USART1_IRQHandler+0x50>
				else
				{
					USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;
					USART_RX_STA++;
 80002e8:	1c59      	adds	r1, r3, #1
 80002ea:	b289      	uxth	r1, r1
			else //还没收到0X0D
			{	
				if(Res==0x0d)USART_RX_STA|=0x4000;
				else
				{
					USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;
 80002ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80002f0:	4c0b      	ldr	r4, [pc, #44]	; (8000320 <USART1_IRQHandler+0x60>)
					USART_RX_STA++;
 80002f2:	8011      	strh	r1, [r2, #0]
					if(USART_RX_STA>(USART_REC_LEN-1))USART_RX_STA=0;//接收数据错误,重新开始接收	  
 80002f4:	29c7      	cmp	r1, #199	; 0xc7
			else //还没收到0X0D
			{	
				if(Res==0x0d)USART_RX_STA|=0x4000;
				else
				{
					USART_RX_BUF[USART_RX_STA&0X3FFF]=Res ;
 80002f6:	54e0      	strb	r0, [r4, r3]
					USART_RX_STA++;
					if(USART_RX_STA>(USART_REC_LEN-1))USART_RX_STA=0;//接收数据错误,重新开始接收	  
 80002f8:	d9e9      	bls.n	80002ce <USART1_IRQHandler+0xe>
		
		if((USART_RX_STA&0x8000)==0)//接收未完成
		{
			if(USART_RX_STA&0x4000)//接收到了0x0d
			{
				if(Res!=0x0a)USART_RX_STA=0;//接收错误,重新开始
 80002fa:	2300      	movs	r3, #0
 80002fc:	8013      	strh	r3, [r2, #0]
 80002fe:	bd10      	pop	{r4, pc}
 8000300:	280a      	cmp	r0, #10
 8000302:	d1fa      	bne.n	80002fa <USART1_IRQHandler+0x3a>
				else USART_RX_STA|=0x8000;	//接收完成了 
 8000304:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000308:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800030c:	8013      	strh	r3, [r2, #0]
 800030e:	bd10      	pop	{r4, pc}
			}
			else //还没收到0X0D
			{	
				if(Res==0x0d)USART_RX_STA|=0x4000;
 8000310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000314:	8013      	strh	r3, [r2, #0]
 8000316:	bd10      	pop	{r4, pc}
 8000318:	40011000 	.word	0x40011000
 800031c:	20000028 	.word	0x20000028
 8000320:	2000002c 	.word	0x2000002c

08000324 <SystemInit>:
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000324:	4b36      	ldr	r3, [pc, #216]	; (8000400 <SystemInit+0xdc>)

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000326:	4837      	ldr	r0, [pc, #220]	; (8000404 <SystemInit+0xe0>)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000328:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800032a:	2100      	movs	r1, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800032c:	f042 0201 	orr.w	r2, r2, #1
 8000330:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000332:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800033a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800033e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000340:	6058      	str	r0, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000342:	681a      	ldr	r2, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000344:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000346:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800034a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800034c:	60d9      	str	r1, [r3, #12]
{
#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx) || defined (STM32F401xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800034e:	9100      	str	r1, [sp, #0]
 8000350:	9101      	str	r1, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000352:	681a      	ldr	r2, [r3, #0]
 8000354:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000358:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800035a:	461a      	mov	r2, r3
 800035c:	e003      	b.n	8000366 <SystemInit+0x42>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800035e:	9b00      	ldr	r3, [sp, #0]
 8000360:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000364:	d009      	beq.n	800037a <SystemInit+0x56>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000366:	6813      	ldr	r3, [r2, #0]
 8000368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800036c:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 800036e:	9b00      	ldr	r3, [sp, #0]
 8000370:	3301      	adds	r3, #1
 8000372:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000374:	9b01      	ldr	r3, [sp, #4]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d0f1      	beq.n	800035e <SystemInit+0x3a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800037a:	4b21      	ldr	r3, [pc, #132]	; (8000400 <SystemInit+0xdc>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8000382:	bf18      	it	ne
 8000384:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000386:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000388:	9b01      	ldr	r3, [sp, #4]
 800038a:	2b01      	cmp	r3, #1
 800038c:	d005      	beq.n	800039a <SystemInit+0x76>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800038e:	4b1e      	ldr	r3, [pc, #120]	; (8000408 <SystemInit+0xe4>)
 8000390:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000394:	609a      	str	r2, [r3, #8]
#endif
}
 8000396:	b002      	add	sp, #8
 8000398:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800039a:	4b19      	ldr	r3, [pc, #100]	; (8000400 <SystemInit+0xdc>)
    PWR->CR |= PWR_CR_VOS;
 800039c:	491b      	ldr	r1, [pc, #108]	; (800040c <SystemInit+0xe8>)
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800039e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80003a0:	481b      	ldr	r0, [pc, #108]	; (8000410 <SystemInit+0xec>)
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80003a6:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80003a8:	680a      	ldr	r2, [r1, #0]
 80003aa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80003ae:	600a      	str	r2, [r1, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80003b0:	689a      	ldr	r2, [r3, #8]
 80003b2:	609a      	str	r2, [r3, #8]

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80003b4:	689a      	ldr	r2, [r3, #8]
 80003b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80003ba:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80003bc:	689a      	ldr	r2, [r3, #8]
 80003be:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80003c2:	609a      	str	r2, [r3, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80003c4:	6058      	str	r0, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80003c6:	681a      	ldr	r2, [r3, #0]
 80003c8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80003cc:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80003ce:	461a      	mov	r2, r3
 80003d0:	6811      	ldr	r1, [r2, #0]
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <SystemInit+0xdc>)
 80003d4:	0189      	lsls	r1, r1, #6
 80003d6:	d5fb      	bpl.n	80003d0 <SystemInit+0xac>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx  */

#if defined (STM32F40_41xxx)     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80003d8:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <SystemInit+0xf0>)
 80003da:	f240 7105 	movw	r1, #1797	; 0x705
 80003de:	6011      	str	r1, [r2, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003e0:	689a      	ldr	r2, [r3, #8]
 80003e2:	f022 0203 	bic.w	r2, r2, #3
 80003e6:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80003e8:	689a      	ldr	r2, [r3, #8]
 80003ea:	f042 0202 	orr.w	r2, r2, #2
 80003ee:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80003f0:	461a      	mov	r2, r3
 80003f2:	6893      	ldr	r3, [r2, #8]
 80003f4:	f003 030c 	and.w	r3, r3, #12
 80003f8:	2b08      	cmp	r3, #8
 80003fa:	d1fa      	bne.n	80003f2 <SystemInit+0xce>
 80003fc:	e7c7      	b.n	800038e <SystemInit+0x6a>
 80003fe:	bf00      	nop
 8000400:	40023800 	.word	0x40023800
 8000404:	24003010 	.word	0x24003010
 8000408:	e000ed00 	.word	0xe000ed00
 800040c:	40007000 	.word	0x40007000
 8000410:	07405408 	.word	0x07405408
 8000414:	40023c00 	.word	0x40023c00

08000418 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000418:	4818      	ldr	r0, [pc, #96]	; (800047c <SystemCoreClockUpdate+0x64>)
 800041a:	6883      	ldr	r3, [r0, #8]

  switch (tmp)
 800041c:	f003 030c 	and.w	r3, r3, #12
 8000420:	2b04      	cmp	r3, #4
 8000422:	d028      	beq.n	8000476 <SystemCoreClockUpdate+0x5e>
 8000424:	2b08      	cmp	r3, #8
 8000426:	d009      	beq.n	800043c <SystemCoreClockUpdate+0x24>
 8000428:	4b15      	ldr	r3, [pc, #84]	; (8000480 <SystemCoreClockUpdate+0x68>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800042a:	4a14      	ldr	r2, [pc, #80]	; (800047c <SystemCoreClockUpdate+0x64>)
 800042c:	4915      	ldr	r1, [pc, #84]	; (8000484 <SystemCoreClockUpdate+0x6c>)
 800042e:	6892      	ldr	r2, [r2, #8]
 8000430:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000434:	5c8a      	ldrb	r2, [r1, r2]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000436:	40d3      	lsrs	r3, r2
 8000438:	610b      	str	r3, [r1, #16]
 800043a:	4770      	bx	lr
      break;
    case 0x08:  /* PLL used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800043c:	6843      	ldr	r3, [r0, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800043e:	6841      	ldr	r1, [r0, #4]
      
#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx) || defined (STM32F401xx)
      if (pllsource != 0)
 8000440:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000444:	6843      	ldr	r3, [r0, #4]
 8000446:	bf18      	it	ne
 8000448:	480f      	ldrne	r0, [pc, #60]	; (8000488 <SystemCoreClockUpdate+0x70>)
    case 0x08:  /* PLL used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800044a:	f001 023f 	and.w	r2, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800044e:	bf0c      	ite	eq
 8000450:	490b      	ldreq	r1, [pc, #44]	; (8000480 <SystemCoreClockUpdate+0x68>)
      
#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx) || defined (STM32F401xx)
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000452:	fbb0 f1f2 	udivne	r1, r0, r2
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000456:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800045a:	bf08      	it	eq
 800045c:	fbb1 f1f2 	udiveq	r1, r1, r2
 8000460:	fb01 f203 	mul.w	r2, r1, r3
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <SystemCoreClockUpdate+0x64>)
 8000466:	685b      	ldr	r3, [r3, #4]
      SystemCoreClock = pllvco/pllp;      
 8000468:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800046c:	3301      	adds	r3, #1
 800046e:	005b      	lsls	r3, r3, #1
 8000470:	fbb2 f3f3 	udiv	r3, r2, r3
      break;
 8000474:	e7d9      	b.n	800042a <SystemCoreClockUpdate+0x12>
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 8000476:	4b04      	ldr	r3, [pc, #16]	; (8000488 <SystemCoreClockUpdate+0x70>)
 8000478:	e7d7      	b.n	800042a <SystemCoreClockUpdate+0x12>
 800047a:	bf00      	nop
 800047c:	40023800 	.word	0x40023800
 8000480:	00f42400 	.word	0x00f42400
 8000484:	20000000 	.word	0x20000000
 8000488:	007a1200 	.word	0x007a1200

0800048c <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 800048c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000490:	4b02      	ldr	r3, [pc, #8]	; (800049c <NVIC_PriorityGroupConfig+0x10>)
 8000492:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000496:	60d8      	str	r0, [r3, #12]
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	e000ed00 	.word	0xe000ed00

080004a0 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80004a0:	78c3      	ldrb	r3, [r0, #3]
 80004a2:	b95b      	cbnz	r3, 80004bc <NVIC_Init+0x1c>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80004a4:	7803      	ldrb	r3, [r0, #0]
 80004a6:	4818      	ldr	r0, [pc, #96]	; (8000508 <NVIC_Init+0x68>)
 80004a8:	095a      	lsrs	r2, r3, #5
 80004aa:	3220      	adds	r2, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80004ac:	f003 031f 	and.w	r3, r3, #31
 80004b0:	2101      	movs	r1, #1
 80004b2:	fa01 f303 	lsl.w	r3, r1, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80004b6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80004ba:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80004bc:	4b13      	ldr	r3, [pc, #76]	; (800050c <NVIC_Init+0x6c>)
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80004be:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80004c0:	68d9      	ldr	r1, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80004c2:	7847      	ldrb	r7, [r0, #1]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80004c4:	7882      	ldrb	r2, [r0, #2]
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80004c6:	7804      	ldrb	r4, [r0, #0]
 80004c8:	4e0f      	ldr	r6, [pc, #60]	; (8000508 <NVIC_Init+0x68>)
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80004ca:	43c9      	mvns	r1, r1
 80004cc:	f3c1 2102 	ubfx	r1, r1, #8, #3
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80004d0:	f1c1 0504 	rsb	r5, r1, #4
 80004d4:	b2ed      	uxtb	r5, r5
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80004d6:	230f      	movs	r3, #15
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80004d8:	fa07 f505 	lsl.w	r5, r7, r5
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80004dc:	410b      	asrs	r3, r1
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80004de:	b2ed      	uxtb	r5, r5
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80004e0:	4013      	ands	r3, r2
 80004e2:	432b      	orrs	r3, r5
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80004e4:	f104 4260 	add.w	r2, r4, #3758096384	; 0xe0000000
 80004e8:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 80004ec:	011b      	lsls	r3, r3, #4
 80004ee:	b2db      	uxtb	r3, r3
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80004f0:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80004f4:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80004f6:	2201      	movs	r2, #1
 80004f8:	f003 011f 	and.w	r1, r3, #31
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80004fc:	095b      	lsrs	r3, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80004fe:	408a      	lsls	r2, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000500:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000504:	bcf0      	pop	{r4, r5, r6, r7}
 8000506:	4770      	bx	lr
 8000508:	e000e100 	.word	0xe000e100
 800050c:	e000ed00 	.word	0xe000ed00

08000510 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000510:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8000514:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8000518:	4b01      	ldr	r3, [pc, #4]	; (8000520 <NVIC_SetVectorTable+0x10>)
 800051a:	4308      	orrs	r0, r1
 800051c:	6098      	str	r0, [r3, #8]
 800051e:	4770      	bx	lr
 8000520:	e000ed00 	.word	0xe000ed00

08000524 <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <NVIC_SystemLPConfig+0x14>)
 8000526:	6913      	ldr	r3, [r2, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8000528:	b919      	cbnz	r1, 8000532 <NVIC_SystemLPConfig+0xe>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 800052a:	ea23 0000 	bic.w	r0, r3, r0
 800052e:	6110      	str	r0, [r2, #16]
 8000530:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000532:	4318      	orrs	r0, r3
 8000534:	6110      	str	r0, [r2, #16]
 8000536:	4770      	bx	lr
 8000538:	e000ed00 	.word	0xe000ed00

0800053c <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800053c:	4a04      	ldr	r2, [pc, #16]	; (8000550 <SysTick_CLKSourceConfig+0x14>)
 800053e:	6813      	ldr	r3, [r2, #0]
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000540:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000542:	bf0c      	ite	eq
 8000544:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000548:	f023 0304 	bicne.w	r3, r3, #4
 800054c:	6013      	str	r3, [r2, #0]
 800054e:	4770      	bx	lr
 8000550:	e000e010 	.word	0xe000e010

08000554 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000554:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8000556:	4b4b      	ldr	r3, [pc, #300]	; (8000684 <GPIO_DeInit+0x130>)
 8000558:	4298      	cmp	r0, r3
 800055a:	d02a      	beq.n	80005b2 <GPIO_DeInit+0x5e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 800055c:	4b4a      	ldr	r3, [pc, #296]	; (8000688 <GPIO_DeInit+0x134>)
 800055e:	4298      	cmp	r0, r3
 8000560:	d031      	beq.n	80005c6 <GPIO_DeInit+0x72>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 8000562:	4b4a      	ldr	r3, [pc, #296]	; (800068c <GPIO_DeInit+0x138>)
 8000564:	4298      	cmp	r0, r3
 8000566:	d038      	beq.n	80005da <GPIO_DeInit+0x86>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 8000568:	4b49      	ldr	r3, [pc, #292]	; (8000690 <GPIO_DeInit+0x13c>)
 800056a:	4298      	cmp	r0, r3
 800056c:	d03f      	beq.n	80005ee <GPIO_DeInit+0x9a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 800056e:	4b49      	ldr	r3, [pc, #292]	; (8000694 <GPIO_DeInit+0x140>)
 8000570:	4298      	cmp	r0, r3
 8000572:	d046      	beq.n	8000602 <GPIO_DeInit+0xae>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 8000574:	4b48      	ldr	r3, [pc, #288]	; (8000698 <GPIO_DeInit+0x144>)
 8000576:	4298      	cmp	r0, r3
 8000578:	d04d      	beq.n	8000616 <GPIO_DeInit+0xc2>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 800057a:	4b48      	ldr	r3, [pc, #288]	; (800069c <GPIO_DeInit+0x148>)
 800057c:	4298      	cmp	r0, r3
 800057e:	d054      	beq.n	800062a <GPIO_DeInit+0xd6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 8000580:	4b47      	ldr	r3, [pc, #284]	; (80006a0 <GPIO_DeInit+0x14c>)
 8000582:	4298      	cmp	r0, r3
 8000584:	d05b      	beq.n	800063e <GPIO_DeInit+0xea>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }

  else if (GPIOx == GPIOI)
 8000586:	4b47      	ldr	r3, [pc, #284]	; (80006a4 <GPIO_DeInit+0x150>)
 8000588:	4298      	cmp	r0, r3
 800058a:	d062      	beq.n	8000652 <GPIO_DeInit+0xfe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
  }
  else if (GPIOx == GPIOJ)
 800058c:	4b46      	ldr	r3, [pc, #280]	; (80006a8 <GPIO_DeInit+0x154>)
 800058e:	4298      	cmp	r0, r3
 8000590:	d06b      	beq.n	800066a <GPIO_DeInit+0x116>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOK)
 8000592:	4b46      	ldr	r3, [pc, #280]	; (80006ac <GPIO_DeInit+0x158>)
 8000594:	4298      	cmp	r0, r3
 8000596:	d000      	beq.n	800059a <GPIO_DeInit+0x46>
 8000598:	bd08      	pop	{r3, pc}
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
 800059a:	2101      	movs	r1, #1
 800059c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80005a0:	f000 fb20 	bl	8000be4 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 80005a4:	2100      	movs	r1, #0
 80005a6:	f44f 6080 	mov.w	r0, #1024	; 0x400
    }
  }
}
 80005aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOK)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 80005ae:	f000 bb19 	b.w	8000be4 <RCC_AHB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80005b2:	2101      	movs	r1, #1
 80005b4:	4608      	mov	r0, r1
 80005b6:	f000 fb15 	bl	8000be4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80005ba:	2100      	movs	r1, #0
 80005bc:	2001      	movs	r0, #1
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80005be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80005c2:	f000 bb0f 	b.w	8000be4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80005c6:	2101      	movs	r1, #1
 80005c8:	2002      	movs	r0, #2
 80005ca:	f000 fb0b 	bl	8000be4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 80005ce:	2100      	movs	r1, #0
 80005d0:	2002      	movs	r0, #2
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80005d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 80005d6:	f000 bb05 	b.w	8000be4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80005da:	2101      	movs	r1, #1
 80005dc:	2004      	movs	r0, #4
 80005de:	f000 fb01 	bl	8000be4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80005e2:	2100      	movs	r1, #0
 80005e4:	2004      	movs	r0, #4
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80005e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80005ea:	f000 bafb 	b.w	8000be4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80005ee:	2101      	movs	r1, #1
 80005f0:	2008      	movs	r0, #8
 80005f2:	f000 faf7 	bl	8000be4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80005f6:	2100      	movs	r1, #0
 80005f8:	2008      	movs	r0, #8
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80005fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80005fe:	f000 baf1 	b.w	8000be4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000602:	2101      	movs	r1, #1
 8000604:	2010      	movs	r0, #16
 8000606:	f000 faed 	bl	8000be4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 800060a:	2100      	movs	r1, #0
 800060c:	2010      	movs	r0, #16
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800060e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8000612:	f000 bae7 	b.w	8000be4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8000616:	2101      	movs	r1, #1
 8000618:	2020      	movs	r0, #32
 800061a:	f000 fae3 	bl	8000be4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800061e:	2100      	movs	r1, #0
 8000620:	2020      	movs	r0, #32
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000622:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8000626:	f000 badd 	b.w	8000be4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 800062a:	2101      	movs	r1, #1
 800062c:	2040      	movs	r0, #64	; 0x40
 800062e:	f000 fad9 	bl	8000be4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8000632:	2100      	movs	r1, #0
 8000634:	2040      	movs	r0, #64	; 0x40
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000636:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 800063a:	f000 bad3 	b.w	8000be4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800063e:	2101      	movs	r1, #1
 8000640:	2080      	movs	r0, #128	; 0x80
 8000642:	f000 facf 	bl	8000be4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8000646:	2100      	movs	r1, #0
 8000648:	2080      	movs	r0, #128	; 0x80
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800064a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800064e:	f000 bac9 	b.w	8000be4 <RCC_AHB1PeriphResetCmd>
  }

  else if (GPIOx == GPIOI)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8000652:	2101      	movs	r1, #1
 8000654:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000658:	f000 fac4 	bl	8000be4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 800065c:	2100      	movs	r1, #0
 800065e:	f44f 7080 	mov.w	r0, #256	; 0x100
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000662:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  }

  else if (GPIOx == GPIOI)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000666:	f000 babd 	b.w	8000be4 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOJ)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
 800066a:	2101      	movs	r1, #1
 800066c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000670:	f000 fab8 	bl	8000be4 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 8000674:	2100      	movs	r1, #0
 8000676:	f44f 7000 	mov.w	r0, #512	; 0x200
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 800067a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
  }
  else if (GPIOx == GPIOJ)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 800067e:	f000 bab1 	b.w	8000be4 <RCC_AHB1PeriphResetCmd>
 8000682:	bf00      	nop
 8000684:	40020000 	.word	0x40020000
 8000688:	40020400 	.word	0x40020400
 800068c:	40020800 	.word	0x40020800
 8000690:	40020c00 	.word	0x40020c00
 8000694:	40021000 	.word	0x40021000
 8000698:	40021400 	.word	0x40021400
 800069c:	40021800 	.word	0x40021800
 80006a0:	40021c00 	.word	0x40021c00
 80006a4:	40022000 	.word	0x40022000
 80006a8:	40022400 	.word	0x40022400
 80006ac:	40022800 	.word	0x40022800

080006b0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80006b0:	2200      	movs	r2, #0
 80006b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80006b6:	4613      	mov	r3, r2
 80006b8:	f8d1 e000 	ldr.w	lr, [r1]
  {
    pos = ((uint32_t)0x01) << pinpos;
 80006bc:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80006be:	f04f 0c03 	mov.w	ip, #3
 80006c2:	e004      	b.n	80006ce <GPIO_Init+0x1e>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80006c4:	3301      	adds	r3, #1
 80006c6:	2b10      	cmp	r3, #16
 80006c8:	f102 0202 	add.w	r2, r2, #2
 80006cc:	d029      	beq.n	8000722 <GPIO_Init+0x72>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80006ce:	fa07 f403 	lsl.w	r4, r7, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
 80006d2:	ea34 050e 	bics.w	r5, r4, lr
 80006d6:	d1f5      	bne.n	80006c4 <GPIO_Init+0x14>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80006d8:	f8d0 8000 	ldr.w	r8, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80006dc:	790e      	ldrb	r6, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80006de:	fa0c f502 	lsl.w	r5, ip, r2
 80006e2:	43ed      	mvns	r5, r5
 80006e4:	ea08 0805 	and.w	r8, r8, r5
 80006e8:	f8c0 8000 	str.w	r8, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80006ec:	f8d0 9000 	ldr.w	r9, [r0]
 80006f0:	fa06 fa02 	lsl.w	sl, r6, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80006f4:	3e01      	subs	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80006f6:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80006fa:	2e01      	cmp	r6, #1
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80006fc:	fa0c f802 	lsl.w	r8, ip, r2
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000700:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000704:	d90f      	bls.n	8000726 <GPIO_Init+0x76>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000706:	68c5      	ldr	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000708:	79cc      	ldrb	r4, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800070a:	ea25 0508 	bic.w	r5, r5, r8
 800070e:	60c5      	str	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000710:	68c5      	ldr	r5, [r0, #12]
 8000712:	4094      	lsls	r4, r2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000714:	3301      	adds	r3, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000716:	432c      	orrs	r4, r5
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000718:	2b10      	cmp	r3, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800071a:	60c4      	str	r4, [r0, #12]
 800071c:	f102 0202 	add.w	r2, r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000720:	d1d5      	bne.n	80006ce <GPIO_Init+0x1e>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000726:	6886      	ldr	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000728:	f891 9005 	ldrb.w	r9, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800072c:	4035      	ands	r5, r6
 800072e:	6085      	str	r5, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000730:	6886      	ldr	r6, [r0, #8]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000732:	798d      	ldrb	r5, [r1, #6]
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000734:	fa09 f902 	lsl.w	r9, r9, r2
 8000738:	ea49 0606 	orr.w	r6, r9, r6
 800073c:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800073e:	6846      	ldr	r6, [r0, #4]
 8000740:	ea26 0404 	bic.w	r4, r6, r4
 8000744:	6044      	str	r4, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000746:	6846      	ldr	r6, [r0, #4]
 8000748:	fa05 f403 	lsl.w	r4, r5, r3
 800074c:	b2a4      	uxth	r4, r4
 800074e:	4334      	orrs	r4, r6
 8000750:	6044      	str	r4, [r0, #4]
 8000752:	e7d8      	b.n	8000706 <GPIO_Init+0x56>

08000754 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000754:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000756:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800075a:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800075c:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800075e:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000760:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000762:	71c3      	strb	r3, [r0, #7]
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop

08000768 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000768:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 800076a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800076e:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8000770:	9b01      	ldr	r3, [sp, #4]
 8000772:	430b      	orrs	r3, r1
 8000774:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000776:	9b01      	ldr	r3, [sp, #4]
 8000778:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800077a:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800077c:	9b01      	ldr	r3, [sp, #4]
 800077e:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000780:	69c3      	ldr	r3, [r0, #28]
 8000782:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000784:	69c3      	ldr	r3, [r0, #28]
 8000786:	9301      	str	r3, [sp, #4]
}
 8000788:	b002      	add	sp, #8
 800078a:	4770      	bx	lr

0800078c <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800078c:	6903      	ldr	r3, [r0, #16]
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 800078e:	4219      	tst	r1, r3
}
 8000790:	bf14      	ite	ne
 8000792:	2001      	movne	r0, #1
 8000794:	2000      	moveq	r0, #0
 8000796:	4770      	bx	lr

08000798 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000798:	6900      	ldr	r0, [r0, #16]
}
 800079a:	b280      	uxth	r0, r0
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop

080007a0 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 80007a0:	6943      	ldr	r3, [r0, #20]
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 80007a2:	4219      	tst	r1, r3
}
 80007a4:	bf14      	ite	ne
 80007a6:	2001      	movne	r0, #1
 80007a8:	2000      	moveq	r0, #0
 80007aa:	4770      	bx	lr

080007ac <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 80007ac:	6940      	ldr	r0, [r0, #20]
}
 80007ae:	b280      	uxth	r0, r0
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop

080007b4 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80007b4:	8301      	strh	r1, [r0, #24]
 80007b6:	4770      	bx	lr

080007b8 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80007b8:	8341      	strh	r1, [r0, #26]
 80007ba:	4770      	bx	lr

080007bc <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80007bc:	b90a      	cbnz	r2, 80007c2 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80007be:	8341      	strh	r1, [r0, #26]
 80007c0:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 80007c2:	8301      	strh	r1, [r0, #24]
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop

080007c8 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80007c8:	6141      	str	r1, [r0, #20]
 80007ca:	4770      	bx	lr

080007cc <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80007cc:	6943      	ldr	r3, [r0, #20]
 80007ce:	4059      	eors	r1, r3
 80007d0:	6141      	str	r1, [r0, #20]
 80007d2:	4770      	bx	lr

080007d4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80007d4:	08cb      	lsrs	r3, r1, #3
 80007d6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80007da:	f001 0107 	and.w	r1, r1, #7
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80007de:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80007e0:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80007e2:	6a04      	ldr	r4, [r0, #32]
 80007e4:	230f      	movs	r3, #15
 80007e6:	408b      	lsls	r3, r1
 80007e8:	ea24 0303 	bic.w	r3, r4, r3
 80007ec:	6203      	str	r3, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80007ee:	6a03      	ldr	r3, [r0, #32]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 80007f0:	bc10      	pop	{r4}
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80007f2:	408a      	lsls	r2, r1
 80007f4:	ea42 0103 	orr.w	r1, r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80007f8:	6201      	str	r1, [r0, #32]
}
 80007fa:	4770      	bx	lr

080007fc <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <RCC_DeInit+0x40>)
  RCC->PLLI2SCFGR = 0x20003000;
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 80007fe:	4810      	ldr	r0, [pc, #64]	; (8000840 <RCC_DeInit+0x44>)
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000800:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000802:	2100      	movs	r1, #0
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000804:	f042 0201 	orr.w	r2, r2, #1
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000808:	b430      	push	{r4, r5}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800080a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800080c:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800080e:	681a      	ldr	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000810:	4d0c      	ldr	r5, [pc, #48]	; (8000844 <RCC_DeInit+0x48>)

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000812:	4c0d      	ldr	r4, [pc, #52]	; (8000848 <RCC_DeInit+0x4c>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8000814:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8000818:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800081c:	601a      	str	r2, [r3, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800081e:	605d      	str	r5, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000820:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000824:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800082e:	601a      	str	r2, [r3, #0]
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 8000830:	bc30      	pop	{r4, r5}
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000832:	60d9      	str	r1, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 8000834:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800
 8000840:	24003000 	.word	0x24003000
 8000844:	24003010 	.word	0x24003010
 8000848:	20003000 	.word	0x20003000

0800084c <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 800084c:	4b02      	ldr	r3, [pc, #8]	; (8000858 <RCC_HSEConfig+0xc>)
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8000852:	7018      	strb	r0, [r3, #0]
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40023802 	.word	0x40023802

0800085c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 800085c:	b082      	sub	sp, #8
  __IO uint32_t startupcounter = 0;
 800085e:	2300      	movs	r3, #0

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000860:	4a0a      	ldr	r2, [pc, #40]	; (800088c <RCC_WaitForHSEStartUp+0x30>)
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t startupcounter = 0;
 8000862:	9301      	str	r3, [sp, #4]
 8000864:	e002      	b.n	800086c <RCC_WaitForHSEStartUp+0x10>
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000866:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800086a:	d008      	beq.n	800087e <RCC_WaitForHSEStartUp+0x22>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 800086c:	6813      	ldr	r3, [r2, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800086e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 8000872:	9b01      	ldr	r3, [sp, #4]
 8000874:	f103 0301 	add.w	r3, r3, #1
 8000878:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800087a:	9b01      	ldr	r3, [sp, #4]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800087c:	d0f3      	beq.n	8000866 <RCC_WaitForHSEStartUp+0xa>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 800087e:	4b03      	ldr	r3, [pc, #12]	; (800088c <RCC_WaitForHSEStartUp+0x30>)
 8000880:	6818      	ldr	r0, [r3, #0]
  }
  else
  {
    status = ERROR;
  }
  return (status);
 8000882:	f3c0 4040 	ubfx	r0, r0, #17, #1
}
 8000886:	b002      	add	sp, #8
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800

08000890 <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8000890:	4a03      	ldr	r2, [pc, #12]	; (80008a0 <RCC_AdjustHSICalibrationValue+0x10>)
 8000892:	6813      	ldr	r3, [r2, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8000894:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8000898:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 800089c:	6010      	str	r0, [r2, #0]
 800089e:	4770      	bx	lr
 80008a0:	40023800 	.word	0x40023800

080008a4 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80008a4:	4b01      	ldr	r3, [pc, #4]	; (80008ac <RCC_HSICmd+0x8>)
 80008a6:	6018      	str	r0, [r3, #0]
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	42470000 	.word	0x42470000

080008b0 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <RCC_LSEConfig+0x1c>)
 80008b2:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80008b4:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80008b6:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80008b8:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80008ba:	d005      	beq.n	80008c8 <RCC_LSEConfig+0x18>
 80008bc:	2804      	cmp	r0, #4
 80008be:	d102      	bne.n	80008c6 <RCC_LSEConfig+0x16>
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80008c0:	2205      	movs	r2, #5
 80008c2:	701a      	strb	r2, [r3, #0]
 80008c4:	4770      	bx	lr
 80008c6:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 80008c8:	7018      	strb	r0, [r3, #0]
      break;
 80008ca:	4770      	bx	lr
 80008cc:	40023870 	.word	0x40023870

080008d0 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80008d0:	4b01      	ldr	r3, [pc, #4]	; (80008d8 <RCC_LSICmd+0x8>)
 80008d2:	6018      	str	r0, [r3, #0]
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	42470e80 	.word	0x42470e80

080008dc <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 80008dc:	b430      	push	{r4, r5}
 80008de:	9c02      	ldr	r4, [sp, #8]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80008e0:	4d06      	ldr	r5, [pc, #24]	; (80008fc <RCC_PLLConfig+0x20>)
 80008e2:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 80008e6:	4301      	orrs	r1, r0
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	3b01      	subs	r3, #1
 80008ec:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 80008f0:	ea42 4003 	orr.w	r0, r2, r3, lsl #16
 80008f4:	6068      	str	r0, [r5, #4]
                 (PLLQ << 24);
}
 80008f6:	bc30      	pop	{r4, r5}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000900:	4b01      	ldr	r3, [pc, #4]	; (8000908 <RCC_PLLCmd+0x8>)
 8000902:	6018      	str	r0, [r3, #0]
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	42470060 	.word	0x42470060

0800090c <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 800090c:	0709      	lsls	r1, r1, #28
 800090e:	4b03      	ldr	r3, [pc, #12]	; (800091c <RCC_PLLI2SConfig+0x10>)
 8000910:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 8000914:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800

08000920 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8000920:	4b01      	ldr	r3, [pc, #4]	; (8000928 <RCC_PLLI2SCmd+0x8>)
 8000922:	6018      	str	r0, [r3, #0]
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	42470068 	.word	0x42470068

0800092c <RCC_PLLSAIConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
  assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
  
  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 800092c:	0712      	lsls	r2, r2, #28
 800092e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8000932:	4b03      	ldr	r3, [pc, #12]	; (8000940 <RCC_PLLSAIConfig+0x14>)
 8000934:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 8000938:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800

08000944 <RCC_PLLSAICmd>:
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 8000944:	4b01      	ldr	r3, [pc, #4]	; (800094c <RCC_PLLSAICmd+0x8>)
 8000946:	6018      	str	r0, [r3, #0]
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	42470070 	.word	0x42470070

08000950 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8000950:	4b01      	ldr	r3, [pc, #4]	; (8000958 <RCC_ClockSecuritySystemCmd+0x8>)
 8000952:	6018      	str	r0, [r3, #0]
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	4247004c 	.word	0x4247004c

0800095c <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 800095c:	4a03      	ldr	r2, [pc, #12]	; (800096c <RCC_MCO1Config+0x10>)
 800095e:	6893      	ldr	r3, [r2, #8]
 8000960:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8000964:	4319      	orrs	r1, r3

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8000966:	4308      	orrs	r0, r1
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000968:	6090      	str	r0, [r2, #8]
 800096a:	4770      	bx	lr
 800096c:	40023800 	.word	0x40023800

08000970 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8000970:	4a03      	ldr	r2, [pc, #12]	; (8000980 <RCC_MCO2Config+0x10>)
 8000972:	6893      	ldr	r3, [r2, #8]
 8000974:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8000978:	4319      	orrs	r1, r3
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 800097a:	4308      	orrs	r0, r1
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800097c:	6090      	str	r0, [r2, #8]
 800097e:	4770      	bx	lr
 8000980:	40023800 	.word	0x40023800

08000984 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8000984:	4a03      	ldr	r2, [pc, #12]	; (8000994 <RCC_SYSCLKConfig+0x10>)
 8000986:	6893      	ldr	r3, [r2, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8000988:	f023 0303 	bic.w	r3, r3, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800098c:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800098e:	6090      	str	r0, [r2, #8]
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <RCC_GetSYSCLKSource>:
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000998:	4b02      	ldr	r3, [pc, #8]	; (80009a4 <RCC_GetSYSCLKSource+0xc>)
 800099a:	6898      	ldr	r0, [r3, #8]
}
 800099c:	f000 000c 	and.w	r0, r0, #12
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 80009a8:	4a03      	ldr	r2, [pc, #12]	; (80009b8 <RCC_HCLKConfig+0x10>)
 80009aa:	6893      	ldr	r3, [r2, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80009ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80009b0:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80009b2:	6090      	str	r0, [r2, #8]
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80009bc:	4a03      	ldr	r2, [pc, #12]	; (80009cc <RCC_PCLK1Config+0x10>)
 80009be:	6893      	ldr	r3, [r2, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 80009c0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80009c4:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80009c6:	6090      	str	r0, [r2, #8]
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80009d0:	4a03      	ldr	r2, [pc, #12]	; (80009e0 <RCC_PCLK2Config+0x10>)
 80009d2:	6893      	ldr	r3, [r2, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 80009d4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80009d8:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80009dc:	6090      	str	r0, [r2, #8]
 80009de:	4770      	bx	lr
 80009e0:	40023800 	.word	0x40023800

080009e4 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80009e4:	b410      	push	{r4}
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80009e6:	4c21      	ldr	r4, [pc, #132]	; (8000a6c <RCC_GetClocksFreq+0x88>)
 80009e8:	68a3      	ldr	r3, [r4, #8]
  
  switch (tmp)
 80009ea:	f003 030c 	and.w	r3, r3, #12
 80009ee:	2b04      	cmp	r3, #4
 80009f0:	d01a      	beq.n	8000a28 <RCC_GetClocksFreq+0x44>
 80009f2:	2b08      	cmp	r3, #8
 80009f4:	d01b      	beq.n	8000a2e <RCC_GetClocksFreq+0x4a>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80009f6:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <RCC_GetClocksFreq+0x8c>)
 80009f8:	6003      	str	r3, [r0, #0]
    break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80009fa:	4a1c      	ldr	r2, [pc, #112]	; (8000a6c <RCC_GetClocksFreq+0x88>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 80009fc:	491d      	ldr	r1, [pc, #116]	; (8000a74 <RCC_GetClocksFreq+0x90>)
    break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80009fe:	6894      	ldr	r4, [r2, #8]
  tmp = tmp >> 4;
 8000a00:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8000a04:	5d0c      	ldrb	r4, [r1, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000a06:	40e3      	lsrs	r3, r4
 8000a08:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000a0a:	6894      	ldr	r4, [r2, #8]
  tmp = tmp >> 10;
 8000a0c:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8000a10:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a12:	fa23 f404 	lsr.w	r4, r3, r4
 8000a16:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000a18:	6892      	ldr	r2, [r2, #8]
  tmp = tmp >> 13;
  presc = APBAHBPrescTable[tmp];
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
}
 8000a1a:	bc10      	pop	{r4}
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
  tmp = tmp >> 13;
 8000a1c:	f3c2 3242 	ubfx	r2, r2, #13, #3
  presc = APBAHBPrescTable[tmp];
 8000a20:	5c8a      	ldrb	r2, [r1, r2]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a22:	40d3      	lsrs	r3, r2
 8000a24:	60c3      	str	r3, [r0, #12]
}
 8000a26:	4770      	bx	lr
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
    break;
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000a28:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <RCC_GetClocksFreq+0x94>)
 8000a2a:	6003      	str	r3, [r0, #0]
    break;
 8000a2c:	e7e5      	b.n	80009fa <RCC_GetClocksFreq+0x16>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000a2e:	6863      	ldr	r3, [r4, #4]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a30:	6861      	ldr	r1, [r4, #4]
    
    if (pllsource != 0)
 8000a32:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000a36:	6863      	ldr	r3, [r4, #4]
 8000a38:	bf18      	it	ne
 8000a3a:	4c0f      	ldrne	r4, [pc, #60]	; (8000a78 <RCC_GetClocksFreq+0x94>)
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a3c:	f001 023f 	and.w	r2, r1, #63	; 0x3f
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000a40:	bf0c      	ite	eq
 8000a42:	490b      	ldreq	r1, [pc, #44]	; (8000a70 <RCC_GetClocksFreq+0x8c>)
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
    
    if (pllsource != 0)
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000a44:	fbb4 f1f2 	udivne	r1, r4, r2
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000a48:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000a4c:	bf08      	it	eq
 8000a4e:	fbb1 f1f2 	udiveq	r1, r1, r2
 8000a52:	fb01 f203 	mul.w	r2, r1, r3
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000a56:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <RCC_GetClocksFreq+0x88>)
 8000a58:	685b      	ldr	r3, [r3, #4]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000a5a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000a5e:	3301      	adds	r3, #1
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a66:	6003      	str	r3, [r0, #0]
    break;
 8000a68:	e7c7      	b.n	80009fa <RCC_GetClocksFreq+0x16>
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	00f42400 	.word	0x00f42400
 8000a74:	20000014 	.word	0x20000014
 8000a78:	007a1200 	.word	0x007a1200

08000a7c <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8000a7c:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8000a80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000a84:	d109      	bne.n	8000a9a <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8000a86:	4908      	ldr	r1, [pc, #32]	; (8000aa8 <RCC_RTCCLKConfig+0x2c>)
 8000a88:	688b      	ldr	r3, [r1, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000a8a:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8000a8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000a92:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000a96:	4313      	orrs	r3, r2

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8000a98:	608b      	str	r3, [r1, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8000a9a:	4a03      	ldr	r2, [pc, #12]	; (8000aa8 <RCC_RTCCLKConfig+0x2c>)
 8000a9c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000a9e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8000aa2:	4318      	orrs	r0, r3
 8000aa4:	6710      	str	r0, [r2, #112]	; 0x70
 8000aa6:	4770      	bx	lr
 8000aa8:	40023800 	.word	0x40023800

08000aac <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000aac:	4b01      	ldr	r3, [pc, #4]	; (8000ab4 <RCC_RTCCLKCmd+0x8>)
 8000aae:	6018      	str	r0, [r3, #0]
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	42470e3c 	.word	0x42470e3c

08000ab8 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000ab8:	4b01      	ldr	r3, [pc, #4]	; (8000ac0 <RCC_BackupResetCmd+0x8>)
 8000aba:	6018      	str	r0, [r3, #0]
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	42470e40 	.word	0x42470e40

08000ac4 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
 8000ac4:	4b01      	ldr	r3, [pc, #4]	; (8000acc <RCC_I2SCLKConfig+0x8>)
 8000ac6:	6018      	str	r0, [r3, #0]
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	4247015c 	.word	0x4247015c

08000ad0 <RCC_SAIBlockACLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
 8000ad0:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <RCC_SAIBlockACLKConfig+0x14>)
 8000ad2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 8000ad6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
 8000ada:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000adc:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <RCC_SAIBlockBCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <RCC_SAIBlockBCLKConfig+0x14>)
 8000aea:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 8000aee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
 8000af2:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000af4:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <RCC_SAIPLLI2SClkDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <RCC_SAIPLLI2SClkDivConfig+0x14>)
 8000b02:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 8000b06:	3801      	subs	r0, #1
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 8000b08:	f023 031f 	bic.w	r3, r3, #31

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 8000b0c:	4303      	orrs	r3, r0

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000b0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b12:	4770      	bx	lr
 8000b14:	40023800 	.word	0x40023800

08000b18 <RCC_SAIPLLSAIClkDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
 8000b18:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <RCC_SAIPLLSAIClkDivConfig+0x18>)
 8000b1a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 8000b1e:	3801      	subs	r0, #1
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 8000b20:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 8000b24:	ea43 2300 	orr.w	r3, r3, r0, lsl #8

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000b28:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800

08000b34 <RCC_LTDCCLKDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 8000b34:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <RCC_LTDCCLKDivConfig+0x14>)
 8000b36:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 8000b3a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 8000b3e:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000b40:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800

08000b4c <RCC_TIMCLKPresConfig>:
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 8000b4c:	4b01      	ldr	r3, [pc, #4]	; (8000b54 <RCC_TIMCLKPresConfig+0x8>)
 8000b4e:	6018      	str	r0, [r3, #0]
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	424711e0 	.word	0x424711e0

08000b58 <RCC_AHB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b58:	b929      	cbnz	r1, 8000b66 <RCC_AHB1PeriphClockCmd+0xe>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000b5a:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <RCC_AHB1PeriphClockCmd+0x18>)
 8000b5c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000b5e:	ea23 0000 	bic.w	r0, r3, r0
 8000b62:	6310      	str	r0, [r2, #48]	; 0x30
 8000b64:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000b66:	4b02      	ldr	r3, [pc, #8]	; (8000b70 <RCC_AHB1PeriphClockCmd+0x18>)
 8000b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b6a:	4310      	orrs	r0, r2
 8000b6c:	6318      	str	r0, [r3, #48]	; 0x30
 8000b6e:	4770      	bx	lr
 8000b70:	40023800 	.word	0x40023800

08000b74 <RCC_AHB2PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b74:	b929      	cbnz	r1, 8000b82 <RCC_AHB2PeriphClockCmd+0xe>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8000b76:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <RCC_AHB2PeriphClockCmd+0x18>)
 8000b78:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000b7a:	ea23 0000 	bic.w	r0, r3, r0
 8000b7e:	6350      	str	r0, [r2, #52]	; 0x34
 8000b80:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8000b82:	4b02      	ldr	r3, [pc, #8]	; (8000b8c <RCC_AHB2PeriphClockCmd+0x18>)
 8000b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b86:	4310      	orrs	r0, r2
 8000b88:	6358      	str	r0, [r3, #52]	; 0x34
 8000b8a:	4770      	bx	lr
 8000b8c:	40023800 	.word	0x40023800

08000b90 <RCC_AHB3PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b90:	b929      	cbnz	r1, 8000b9e <RCC_AHB3PeriphClockCmd+0xe>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <RCC_AHB3PeriphClockCmd+0x18>)
 8000b94:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8000b96:	ea23 0000 	bic.w	r0, r3, r0
 8000b9a:	6390      	str	r0, [r2, #56]	; 0x38
 8000b9c:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000b9e:	4b02      	ldr	r3, [pc, #8]	; (8000ba8 <RCC_AHB3PeriphClockCmd+0x18>)
 8000ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ba2:	4310      	orrs	r0, r2
 8000ba4:	6398      	str	r0, [r3, #56]	; 0x38
 8000ba6:	4770      	bx	lr
 8000ba8:	40023800 	.word	0x40023800

08000bac <RCC_APB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000bac:	b929      	cbnz	r1, 8000bba <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000bae:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <RCC_APB1PeriphClockCmd+0x18>)
 8000bb0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000bb2:	ea23 0000 	bic.w	r0, r3, r0
 8000bb6:	6410      	str	r0, [r2, #64]	; 0x40
 8000bb8:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000bba:	4b02      	ldr	r3, [pc, #8]	; (8000bc4 <RCC_APB1PeriphClockCmd+0x18>)
 8000bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bbe:	4310      	orrs	r0, r2
 8000bc0:	6418      	str	r0, [r3, #64]	; 0x40
 8000bc2:	4770      	bx	lr
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <RCC_APB2PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000bc8:	b929      	cbnz	r1, 8000bd6 <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000bca:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <RCC_APB2PeriphClockCmd+0x18>)
 8000bcc:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8000bce:	ea23 0000 	bic.w	r0, r3, r0
 8000bd2:	6450      	str	r0, [r2, #68]	; 0x44
 8000bd4:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000bd6:	4b02      	ldr	r3, [pc, #8]	; (8000be0 <RCC_APB2PeriphClockCmd+0x18>)
 8000bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bda:	4310      	orrs	r0, r2
 8000bdc:	6458      	str	r0, [r3, #68]	; 0x44
 8000bde:	4770      	bx	lr
 8000be0:	40023800 	.word	0x40023800

08000be4 <RCC_AHB1PeriphResetCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000be4:	b929      	cbnz	r1, 8000bf2 <RCC_AHB1PeriphResetCmd+0xe>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <RCC_AHB1PeriphResetCmd+0x18>)
 8000be8:	6913      	ldr	r3, [r2, #16]
 8000bea:	ea23 0000 	bic.w	r0, r3, r0
 8000bee:	6110      	str	r0, [r2, #16]
 8000bf0:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000bf2:	4b02      	ldr	r3, [pc, #8]	; (8000bfc <RCC_AHB1PeriphResetCmd+0x18>)
 8000bf4:	691a      	ldr	r2, [r3, #16]
 8000bf6:	4310      	orrs	r0, r2
 8000bf8:	6118      	str	r0, [r3, #16]
 8000bfa:	4770      	bx	lr
 8000bfc:	40023800 	.word	0x40023800

08000c00 <RCC_AHB2PeriphResetCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c00:	b929      	cbnz	r1, 8000c0e <RCC_AHB2PeriphResetCmd+0xe>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8000c02:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <RCC_AHB2PeriphResetCmd+0x18>)
 8000c04:	6953      	ldr	r3, [r2, #20]
 8000c06:	ea23 0000 	bic.w	r0, r3, r0
 8000c0a:	6150      	str	r0, [r2, #20]
 8000c0c:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8000c0e:	4b02      	ldr	r3, [pc, #8]	; (8000c18 <RCC_AHB2PeriphResetCmd+0x18>)
 8000c10:	695a      	ldr	r2, [r3, #20]
 8000c12:	4310      	orrs	r0, r2
 8000c14:	6158      	str	r0, [r3, #20]
 8000c16:	4770      	bx	lr
 8000c18:	40023800 	.word	0x40023800

08000c1c <RCC_AHB3PeriphResetCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c1c:	b929      	cbnz	r1, 8000c2a <RCC_AHB3PeriphResetCmd+0xe>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <RCC_AHB3PeriphResetCmd+0x18>)
 8000c20:	6993      	ldr	r3, [r2, #24]
 8000c22:	ea23 0000 	bic.w	r0, r3, r0
 8000c26:	6190      	str	r0, [r2, #24]
 8000c28:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8000c2a:	4b02      	ldr	r3, [pc, #8]	; (8000c34 <RCC_AHB3PeriphResetCmd+0x18>)
 8000c2c:	699a      	ldr	r2, [r3, #24]
 8000c2e:	4310      	orrs	r0, r2
 8000c30:	6198      	str	r0, [r3, #24]
 8000c32:	4770      	bx	lr
 8000c34:	40023800 	.word	0x40023800

08000c38 <RCC_APB1PeriphResetCmd>:
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c38:	b929      	cbnz	r1, 8000c46 <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000c3a:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <RCC_APB1PeriphResetCmd+0x18>)
 8000c3c:	6a13      	ldr	r3, [r2, #32]
 8000c3e:	ea23 0000 	bic.w	r0, r3, r0
 8000c42:	6210      	str	r0, [r2, #32]
 8000c44:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000c46:	4b02      	ldr	r3, [pc, #8]	; (8000c50 <RCC_APB1PeriphResetCmd+0x18>)
 8000c48:	6a1a      	ldr	r2, [r3, #32]
 8000c4a:	4310      	orrs	r0, r2
 8000c4c:	6218      	str	r0, [r3, #32]
 8000c4e:	4770      	bx	lr
 8000c50:	40023800 	.word	0x40023800

08000c54 <RCC_APB2PeriphResetCmd>:
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c54:	b929      	cbnz	r1, 8000c62 <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <RCC_APB2PeriphResetCmd+0x18>)
 8000c58:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000c5a:	ea23 0000 	bic.w	r0, r3, r0
 8000c5e:	6250      	str	r0, [r2, #36]	; 0x24
 8000c60:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000c62:	4b02      	ldr	r3, [pc, #8]	; (8000c6c <RCC_APB2PeriphResetCmd+0x18>)
 8000c64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c66:	4310      	orrs	r0, r2
 8000c68:	6258      	str	r0, [r3, #36]	; 0x24
 8000c6a:	4770      	bx	lr
 8000c6c:	40023800 	.word	0x40023800

08000c70 <RCC_AHB1PeriphClockLPModeCmd>:
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c70:	b929      	cbnz	r1, 8000c7e <RCC_AHB1PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <RCC_AHB1PeriphClockLPModeCmd+0x18>)
 8000c74:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8000c76:	ea23 0000 	bic.w	r0, r3, r0
 8000c7a:	6510      	str	r0, [r2, #80]	; 0x50
 8000c7c:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000c7e:	4b02      	ldr	r3, [pc, #8]	; (8000c88 <RCC_AHB1PeriphClockLPModeCmd+0x18>)
 8000c80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000c82:	4310      	orrs	r0, r2
 8000c84:	6518      	str	r0, [r3, #80]	; 0x50
 8000c86:	4770      	bx	lr
 8000c88:	40023800 	.word	0x40023800

08000c8c <RCC_AHB2PeriphClockLPModeCmd>:
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c8c:	b929      	cbnz	r1, 8000c9a <RCC_AHB2PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <RCC_AHB2PeriphClockLPModeCmd+0x18>)
 8000c90:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8000c92:	ea23 0000 	bic.w	r0, r3, r0
 8000c96:	6550      	str	r0, [r2, #84]	; 0x54
 8000c98:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8000c9a:	4b02      	ldr	r3, [pc, #8]	; (8000ca4 <RCC_AHB2PeriphClockLPModeCmd+0x18>)
 8000c9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000c9e:	4310      	orrs	r0, r2
 8000ca0:	6558      	str	r0, [r3, #84]	; 0x54
 8000ca2:	4770      	bx	lr
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <RCC_AHB3PeriphClockLPModeCmd>:
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ca8:	b929      	cbnz	r1, 8000cb6 <RCC_AHB3PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <RCC_AHB3PeriphClockLPModeCmd+0x18>)
 8000cac:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8000cae:	ea23 0000 	bic.w	r0, r3, r0
 8000cb2:	6590      	str	r0, [r2, #88]	; 0x58
 8000cb4:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8000cb6:	4b02      	ldr	r3, [pc, #8]	; (8000cc0 <RCC_AHB3PeriphClockLPModeCmd+0x18>)
 8000cb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000cba:	4310      	orrs	r0, r2
 8000cbc:	6598      	str	r0, [r3, #88]	; 0x58
 8000cbe:	4770      	bx	lr
 8000cc0:	40023800 	.word	0x40023800

08000cc4 <RCC_APB1PeriphClockLPModeCmd>:
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000cc4:	b929      	cbnz	r1, 8000cd2 <RCC_APB1PeriphClockLPModeCmd+0xe>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8000cc6:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <RCC_APB1PeriphClockLPModeCmd+0x18>)
 8000cc8:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000cca:	ea23 0000 	bic.w	r0, r3, r0
 8000cce:	6610      	str	r0, [r2, #96]	; 0x60
 8000cd0:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8000cd2:	4b02      	ldr	r3, [pc, #8]	; (8000cdc <RCC_APB1PeriphClockLPModeCmd+0x18>)
 8000cd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cd6:	4310      	orrs	r0, r2
 8000cd8:	6618      	str	r0, [r3, #96]	; 0x60
 8000cda:	4770      	bx	lr
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <RCC_APB2PeriphClockLPModeCmd>:
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ce0:	b929      	cbnz	r1, 8000cee <RCC_APB2PeriphClockLPModeCmd+0xe>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <RCC_APB2PeriphClockLPModeCmd+0x18>)
 8000ce4:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8000ce6:	ea23 0000 	bic.w	r0, r3, r0
 8000cea:	6650      	str	r0, [r2, #100]	; 0x64
 8000cec:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8000cee:	4b02      	ldr	r3, [pc, #8]	; (8000cf8 <RCC_APB2PeriphClockLPModeCmd+0x18>)
 8000cf0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000cf2:	4310      	orrs	r0, r2
 8000cf4:	6658      	str	r0, [r3, #100]	; 0x64
 8000cf6:	4770      	bx	lr
 8000cf8:	40023800 	.word	0x40023800

08000cfc <RCC_LSEModeConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <RCC_LSEModeConfig+0x14>)
 8000cfe:	6f13      	ldr	r3, [r2, #112]	; 0x70
void RCC_LSEModeConfig(uint8_t RCC_Mode)
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(RCC_Mode));
  
  if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
 8000d00:	2801      	cmp	r0, #1
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
 8000d02:	bf0c      	ite	eq
 8000d04:	f043 0308 	orreq.w	r3, r3, #8
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
 8000d08:	f023 0308 	bicne.w	r3, r3, #8
 8000d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8000d0e:	4770      	bx	lr
 8000d10:	40023800 	.word	0x40023800

08000d14 <RCC_ITConfig>:
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d14:	b929      	cbnz	r1, 8000d22 <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <RCC_ITConfig+0x18>)
 8000d18:	7813      	ldrb	r3, [r2, #0]
 8000d1a:	ea23 0000 	bic.w	r0, r3, r0
 8000d1e:	7010      	strb	r0, [r2, #0]
 8000d20:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000d22:	4b02      	ldr	r3, [pc, #8]	; (8000d2c <RCC_ITConfig+0x18>)
 8000d24:	781a      	ldrb	r2, [r3, #0]
 8000d26:	4310      	orrs	r0, r2
 8000d28:	7018      	strb	r0, [r3, #0]
 8000d2a:	4770      	bx	lr
 8000d2c:	4002380d 	.word	0x4002380d

08000d30 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000d30:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d00b      	beq.n	8000d4e <RCC_GetFlagStatus+0x1e>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000d36:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <RCC_GetFlagStatus+0x30>)
 8000d3a:	bf0c      	ite	eq
 8000d3c:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000d3e:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 8000d40:	f000 001f 	and.w	r0, r0, #31
 8000d44:	fa23 f000 	lsr.w	r0, r3, r0
}
 8000d48:	f000 0001 	and.w	r0, r0, #1
 8000d4c:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000d4e:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <RCC_GetFlagStatus+0x30>)
 8000d50:	681b      	ldr	r3, [r3, #0]
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 8000d52:	f000 001f 	and.w	r0, r0, #31
 8000d56:	fa23 f000 	lsr.w	r0, r3, r0
}
 8000d5a:	f000 0001 	and.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	40023800 	.word	0x40023800

08000d64 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8000d64:	4a02      	ldr	r2, [pc, #8]	; (8000d70 <RCC_ClearFlag+0xc>)
 8000d66:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000d68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d6c:	6753      	str	r3, [r2, #116]	; 0x74
 8000d6e:	4770      	bx	lr
 8000d70:	40023800 	.word	0x40023800

08000d74 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <RCC_GetITStatus+0x10>)
 8000d76:	68db      	ldr	r3, [r3, #12]
  else
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8000d78:	4218      	tst	r0, r3
}
 8000d7a:	bf14      	ite	ne
 8000d7c:	2001      	movne	r0, #1
 8000d7e:	2000      	moveq	r0, #0
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800

08000d88 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8000d88:	4b01      	ldr	r3, [pc, #4]	; (8000d90 <RCC_ClearITPendingBit+0x8>)
 8000d8a:	7018      	strb	r0, [r3, #0]
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	4002380e 	.word	0x4002380e

08000d94 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8000d94:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8000d96:	4b3a      	ldr	r3, [pc, #232]	; (8000e80 <USART_DeInit+0xec>)
 8000d98:	4298      	cmp	r0, r3
 8000d9a:	d021      	beq.n	8000de0 <USART_DeInit+0x4c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 8000d9c:	4b39      	ldr	r3, [pc, #228]	; (8000e84 <USART_DeInit+0xf0>)
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d028      	beq.n	8000df4 <USART_DeInit+0x60>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
 8000da2:	4b39      	ldr	r3, [pc, #228]	; (8000e88 <USART_DeInit+0xf4>)
 8000da4:	4298      	cmp	r0, r3
 8000da6:	d031      	beq.n	8000e0c <USART_DeInit+0x78>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
 8000da8:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <USART_DeInit+0xf8>)
 8000daa:	4298      	cmp	r0, r3
 8000dac:	d03a      	beq.n	8000e24 <USART_DeInit+0x90>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
 8000dae:	4b38      	ldr	r3, [pc, #224]	; (8000e90 <USART_DeInit+0xfc>)
 8000db0:	4298      	cmp	r0, r3
 8000db2:	d043      	beq.n	8000e3c <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }  
  else if (USARTx == USART6)
 8000db4:	4b37      	ldr	r3, [pc, #220]	; (8000e94 <USART_DeInit+0x100>)
 8000db6:	4298      	cmp	r0, r3
 8000db8:	d04c      	beq.n	8000e54 <USART_DeInit+0xc0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
  }
  else if (USARTx == UART7)
 8000dba:	4b37      	ldr	r3, [pc, #220]	; (8000e98 <USART_DeInit+0x104>)
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	d053      	beq.n	8000e68 <USART_DeInit+0xd4>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
  }     
  else
  {
    if (USARTx == UART8)
 8000dc0:	4b36      	ldr	r3, [pc, #216]	; (8000e9c <USART_DeInit+0x108>)
 8000dc2:	4298      	cmp	r0, r3
 8000dc4:	d000      	beq.n	8000dc8 <USART_DeInit+0x34>
 8000dc6:	bd08      	pop	{r3, pc}
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 8000dc8:	2101      	movs	r1, #1
 8000dca:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000dce:	f7ff ff33 	bl	8000c38 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    }
  }
}
 8000dd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == UART8)
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 8000ddc:	f7ff bf2c 	b.w	8000c38 <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8000de0:	2101      	movs	r1, #1
 8000de2:	2010      	movs	r0, #16
 8000de4:	f7ff ff36 	bl	8000c54 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8000de8:	2100      	movs	r1, #0
 8000dea:	2010      	movs	r0, #16
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000dec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8000df0:	f7ff bf30 	b.w	8000c54 <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8000df4:	2101      	movs	r1, #1
 8000df6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000dfa:	f7ff ff1d 	bl	8000c38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8000dfe:	2100      	movs	r1, #0
 8000e00:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000e04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8000e08:	f7ff bf16 	b.w	8000c38 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000e12:	f7ff ff11 	bl	8000c38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000e16:	2100      	movs	r1, #0
 8000e18:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000e1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8000e20:	f7ff bf0a 	b.w	8000c38 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8000e24:	2101      	movs	r1, #1
 8000e26:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000e2a:	f7ff ff05 	bl	8000c38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8000e2e:	2100      	movs	r1, #0
 8000e30:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000e34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8000e38:	f7ff befe 	b.w	8000c38 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000e42:	f7ff fef9 	bl	8000c38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8000e46:	2100      	movs	r1, #0
 8000e48:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000e4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8000e50:	f7ff bef2 	b.w	8000c38 <RCC_APB1PeriphResetCmd>
  }  
  else if (USARTx == USART6)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8000e54:	2101      	movs	r1, #1
 8000e56:	2020      	movs	r0, #32
 8000e58:	f7ff fefc 	bl	8000c54 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2020      	movs	r0, #32
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000e60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }  
  else if (USARTx == USART6)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8000e64:	f7ff bef6 	b.w	8000c54 <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == UART7)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 8000e68:	2101      	movs	r1, #1
 8000e6a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e6e:	f7ff fee3 	bl	8000c38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 8000e72:	2100      	movs	r1, #0
 8000e74:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8000e78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
  }
  else if (USARTx == UART7)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 8000e7c:	f7ff bedc 	b.w	8000c38 <RCC_APB1PeriphResetCmd>
 8000e80:	40011000 	.word	0x40011000
 8000e84:	40004400 	.word	0x40004400
 8000e88:	40004800 	.word	0x40004800
 8000e8c:	40004c00 	.word	0x40004c00
 8000e90:	40005000 	.word	0x40005000
 8000e94:	40011400 	.word	0x40011400
 8000e98:	40007800 	.word	0x40007800
 8000e9c:	40007c00 	.word	0x40007c00

08000ea0 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000ea0:	8a02      	ldrh	r2, [r0, #16]
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000ea2:	890b      	ldrh	r3, [r1, #8]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000ea6:	b292      	uxth	r2, r2
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000ea8:	88cf      	ldrh	r7, [r1, #6]
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000eaa:	888e      	ldrh	r6, [r1, #4]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000eac:	4604      	mov	r4, r0

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000eae:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000eb2:	433a      	orrs	r2, r7
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000eb4:	8948      	ldrh	r0, [r1, #10]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000eb6:	460d      	mov	r5, r1
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000eb8:	8989      	ldrh	r1, [r1, #12]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000eba:	8222      	strh	r2, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000ebc:	89a2      	ldrh	r2, [r4, #12]
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000ebe:	4333      	orrs	r3, r6
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000ec0:	b292      	uxth	r2, r2
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000ec2:	4303      	orrs	r3, r0

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000ec4:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000ec8:	f022 020c 	bic.w	r2, r2, #12
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000ed2:	8aa3      	ldrh	r3, [r4, #20]
 8000ed4:	b29b      	uxth	r3, r3

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000eda:	430b      	orrs	r3, r1
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000edc:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000ede:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000ee0:	4668      	mov	r0, sp
 8000ee2:	f7ff fd7f 	bl	80009e4 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000ee6:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <USART_Init+0xbc>)
 8000ee8:	429c      	cmp	r4, r3
 8000eea:	d028      	beq.n	8000f3e <USART_Init+0x9e>
 8000eec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ef0:	429c      	cmp	r4, r3
 8000ef2:	d024      	beq.n	8000f3e <USART_Init+0x9e>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000ef4:	9a02      	ldr	r2, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000ef6:	89a3      	ldrh	r3, [r4, #12]

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000ef8:	89a1      	ldrh	r1, [r4, #12]
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000efa:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000efe:	682b      	ldr	r3, [r5, #0]
 8000f00:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000f04:	bf14      	ite	ne
 8000f06:	005b      	lslne	r3, r3, #1
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000f08:	009b      	lsleq	r3, r3, #2
 8000f0a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000f0e:	fbb2 f0f3 	udiv	r0, r2, r3
  }
  tmpreg = (integerdivider / 100) << 4;
 8000f12:	4a13      	ldr	r2, [pc, #76]	; (8000f60 <USART_Init+0xc0>)
 8000f14:	fba2 3500 	umull	r3, r5, r2, r0
 8000f18:	096d      	lsrs	r5, r5, #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000f1a:	2364      	movs	r3, #100	; 0x64

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000f1c:	0409      	lsls	r1, r1, #16
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000f1e:	fb05 0313 	mls	r3, r5, r3, r0
 8000f22:	ea4f 1505 	mov.w	r5, r5, lsl #4

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000f26:	d40c      	bmi.n	8000f42 <USART_Init+0xa2>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000f28:	011b      	lsls	r3, r3, #4
 8000f2a:	3332      	adds	r3, #50	; 0x32
 8000f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f30:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8000f34:	432b      	orrs	r3, r5
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	8123      	strh	r3, [r4, #8]
}
 8000f3a:	b005      	add	sp, #20
 8000f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);

  if ((USARTx == USART1) || (USARTx == USART6))
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000f3e:	9a03      	ldr	r2, [sp, #12]
 8000f40:	e7d9      	b.n	8000ef6 <USART_Init+0x56>
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000f42:	00d9      	lsls	r1, r3, #3
 8000f44:	3132      	adds	r1, #50	; 0x32
 8000f46:	fba2 3101 	umull	r3, r1, r2, r1
 8000f4a:	f3c1 1242 	ubfx	r2, r1, #5, #3
 8000f4e:	ea42 0305 	orr.w	r3, r2, r5
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	8123      	strh	r3, [r4, #8]
}
 8000f56:	b005      	add	sp, #20
 8000f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40011000 	.word	0x40011000
 8000f60:	51eb851f 	.word	0x51eb851f

08000f64 <USART_StructInit>:
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8000f64:	2300      	movs	r3, #0
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8000f66:	f44f 5116 	mov.w	r1, #9600	; 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000f6a:	220c      	movs	r2, #12
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8000f6c:	6001      	str	r1, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000f6e:	8142      	strh	r2, [r0, #10]
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8000f70:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8000f72:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8000f74:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8000f76:	8183      	strh	r3, [r0, #12]
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8000f7c:	b430      	push	{r4, r5}
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000f7e:	884a      	ldrh	r2, [r1, #2]
 8000f80:	880d      	ldrh	r5, [r1, #0]
 8000f82:	888c      	ldrh	r4, [r1, #4]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000f84:	8a03      	ldrh	r3, [r0, #16]
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000f86:	88c9      	ldrh	r1, [r1, #6]
 8000f88:	432a      	orrs	r2, r5
 8000f8a:	4322      	orrs	r2, r4
 8000f8c:	430a      	orrs	r2, r1
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000f8e:	b29b      	uxth	r3, r3
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000f90:	b292      	uxth	r2, r2
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8000f92:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000f96:	4313      	orrs	r3, r2
 8000f98:	8203      	strh	r3, [r0, #16]
}
 8000f9a:	bc30      	pop	{r4, r5}
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8000fa4:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8000fa6:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8000fa8:	80c3      	strh	r3, [r0, #6]
 8000faa:	4770      	bx	lr

08000fac <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000fac:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000fae:	b929      	cbnz	r1, 8000fbc <USART_Cmd+0x10>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000fb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000fb4:	041b      	lsls	r3, r3, #16
 8000fb6:	0c1b      	lsrs	r3, r3, #16
 8000fb8:	8183      	strh	r3, [r0, #12]
 8000fba:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fc2:	8183      	strh	r3, [r0, #12]
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8000fc8:	8b03      	ldrh	r3, [r0, #24]
 8000fca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000fce:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8000fd0:	8b03      	ldrh	r3, [r0, #24]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	4319      	orrs	r1, r3
 8000fd6:	8301      	strh	r1, [r0, #24]
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8000fdc:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000fde:	b919      	cbnz	r1, 8000fe8 <USART_OverSampling8Cmd+0xc>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8000fe0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000fe4:	8183      	strh	r3, [r0, #12]
 8000fe6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8000fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	8183      	strh	r3, [r0, #12]
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8000ff8:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ffa:	b929      	cbnz	r1, 8001008 <USART_OneBitMethodCmd+0x10>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8000ffc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001000:	041b      	lsls	r3, r3, #16
 8001002:	0c1b      	lsrs	r3, r3, #16
 8001004:	8283      	strh	r3, [r0, #20]
 8001006:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8001008:	b29b      	uxth	r3, r3
 800100a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800100e:	8283      	strh	r3, [r0, #20]
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001014:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001018:	8081      	strh	r1, [r0, #4]
 800101a:	4770      	bx	lr

0800101c <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800101c:	8880      	ldrh	r0, [r0, #4]
}
 800101e:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8001022:	4770      	bx	lr

08001024 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8001024:	8a03      	ldrh	r3, [r0, #16]
 8001026:	f023 030f 	bic.w	r3, r3, #15
 800102a:	041b      	lsls	r3, r3, #16
 800102c:	0c1b      	lsrs	r3, r3, #16
 800102e:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8001030:	8a03      	ldrh	r3, [r0, #16]
 8001032:	b29b      	uxth	r3, r3
 8001034:	4319      	orrs	r1, r3
 8001036:	8201      	strh	r1, [r0, #16]
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 800103c:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 800103e:	b929      	cbnz	r1, 800104c <USART_ReceiverWakeUpCmd+0x10>
    USARTx->CR1 |= USART_CR1_RWU;
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8001040:	f023 0302 	bic.w	r3, r3, #2
 8001044:	041b      	lsls	r3, r3, #16
 8001046:	0c1b      	lsrs	r3, r3, #16
 8001048:	8183      	strh	r3, [r0, #12]
 800104a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 800104c:	b29b      	uxth	r3, r3
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	8183      	strh	r3, [r0, #12]
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8001058:	8983      	ldrh	r3, [r0, #12]
 800105a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800105e:	041b      	lsls	r3, r3, #16
 8001060:	0c1b      	lsrs	r3, r3, #16
 8001062:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8001064:	8983      	ldrh	r3, [r0, #12]
 8001066:	b29b      	uxth	r3, r3
 8001068:	4319      	orrs	r1, r3
 800106a:	8181      	strh	r1, [r0, #12]
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8001070:	8a03      	ldrh	r3, [r0, #16]
 8001072:	f023 0320 	bic.w	r3, r3, #32
 8001076:	041b      	lsls	r3, r3, #16
 8001078:	0c1b      	lsrs	r3, r3, #16
 800107a:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 800107c:	8a03      	ldrh	r3, [r0, #16]
 800107e:	b29b      	uxth	r3, r3
 8001080:	4319      	orrs	r1, r3
 8001082:	8201      	strh	r1, [r0, #16]
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8001088:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800108a:	b929      	cbnz	r1, 8001098 <USART_LINCmd+0x10>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 800108c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001090:	041b      	lsls	r3, r3, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	8203      	strh	r3, [r0, #16]
 8001096:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8001098:	b29b      	uxth	r3, r3
 800109a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109e:	8203      	strh	r3, [r0, #16]
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop

080010a4 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 80010a4:	8983      	ldrh	r3, [r0, #12]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	8183      	strh	r3, [r0, #12]
 80010ae:	4770      	bx	lr

080010b0 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 80010b0:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80010b2:	b929      	cbnz	r1, 80010c0 <USART_HalfDuplexCmd+0x10>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 80010b4:	f023 0308 	bic.w	r3, r3, #8
 80010b8:	041b      	lsls	r3, r3, #16
 80010ba:	0c1b      	lsrs	r3, r3, #16
 80010bc:	8283      	strh	r3, [r0, #20]
 80010be:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	f043 0308 	orr.w	r3, r3, #8
 80010c6:	8283      	strh	r3, [r0, #20]
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 80010cc:	8b03      	ldrh	r3, [r0, #24]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 80010d2:	8b03      	ldrh	r3, [r0, #24]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80010da:	8301      	strh	r1, [r0, #24]
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 80010e0:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010e2:	b929      	cbnz	r1, 80010f0 <USART_SmartCardCmd+0x10>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 80010e4:	f023 0320 	bic.w	r3, r3, #32
 80010e8:	041b      	lsls	r3, r3, #16
 80010ea:	0c1b      	lsrs	r3, r3, #16
 80010ec:	8283      	strh	r3, [r0, #20]
 80010ee:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	f043 0320 	orr.w	r3, r3, #32
 80010f6:	8283      	strh	r3, [r0, #20]
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80010fc:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010fe:	b929      	cbnz	r1, 800110c <USART_SmartCardNACKCmd+0x10>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8001100:	f023 0310 	bic.w	r3, r3, #16
 8001104:	041b      	lsls	r3, r3, #16
 8001106:	0c1b      	lsrs	r3, r3, #16
 8001108:	8283      	strh	r3, [r0, #20]
 800110a:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 800110c:	b29b      	uxth	r3, r3
 800110e:	f043 0310 	orr.w	r3, r3, #16
 8001112:	8283      	strh	r3, [r0, #20]
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop

08001118 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8001118:	8a83      	ldrh	r3, [r0, #20]
 800111a:	f023 0304 	bic.w	r3, r3, #4
 800111e:	041b      	lsls	r3, r3, #16
 8001120:	0c1b      	lsrs	r3, r3, #16
 8001122:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8001124:	8a83      	ldrh	r3, [r0, #20]
 8001126:	b29b      	uxth	r3, r3
 8001128:	4319      	orrs	r1, r3
 800112a:	8281      	strh	r1, [r0, #20]
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8001130:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8001132:	b929      	cbnz	r1, 8001140 <USART_IrDACmd+0x10>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8001134:	f023 0302 	bic.w	r3, r3, #2
 8001138:	041b      	lsls	r3, r3, #16
 800113a:	0c1b      	lsrs	r3, r3, #16
 800113c:	8283      	strh	r3, [r0, #20]
 800113e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8001140:	b29b      	uxth	r3, r3
 8001142:	f043 0302 	orr.w	r3, r3, #2
 8001146:	8283      	strh	r3, [r0, #20]
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800114c:	8a83      	ldrh	r3, [r0, #20]
 800114e:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8001150:	b91a      	cbnz	r2, 800115a <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8001152:	ea23 0101 	bic.w	r1, r3, r1
 8001156:	8281      	strh	r1, [r0, #20]
 8001158:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800115a:	4319      	orrs	r1, r3
 800115c:	8281      	strh	r1, [r0, #20]
 800115e:	4770      	bx	lr

08001160 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001160:	b410      	push	{r4}
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8001162:	f001 041f 	and.w	r4, r1, #31
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001166:	f3c1 1142 	ubfx	r1, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 800116a:	2301      	movs	r3, #1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800116c:	2901      	cmp	r1, #1
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 800116e:	fa03 f304 	lsl.w	r3, r3, r4
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001172:	d00f      	beq.n	8001194 <USART_ITConfig+0x34>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001174:	2902      	cmp	r1, #2
  {
    usartxbase += 0x10;
 8001176:	bf0c      	ite	eq
 8001178:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800117a:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
 800117c:	b92a      	cbnz	r2, 800118a <USART_ITConfig+0x2a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800117e:	6802      	ldr	r2, [r0, #0]
  }
}
 8001180:	bc10      	pop	{r4}
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001182:	ea22 0303 	bic.w	r3, r2, r3
 8001186:	6003      	str	r3, [r0, #0]
  }
}
 8001188:	4770      	bx	lr
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800118a:	6802      	ldr	r2, [r0, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800118c:	bc10      	pop	{r4}
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800118e:	4313      	orrs	r3, r2
 8001190:	6003      	str	r3, [r0, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001192:	4770      	bx	lr
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
 8001194:	300c      	adds	r0, #12
 8001196:	e7f1      	b.n	800117c <USART_ITConfig+0x1c>

08001198 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001198:	8803      	ldrh	r3, [r0, #0]
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 800119a:	4219      	tst	r1, r3
}
 800119c:	bf14      	ite	ne
 800119e:	2001      	movne	r0, #1
 80011a0:	2000      	moveq	r0, #0
 80011a2:	4770      	bx	lr

080011a4 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 80011a4:	43c9      	mvns	r1, r1
 80011a6:	b289      	uxth	r1, r1
 80011a8:	8001      	strh	r1, [r0, #0]
 80011aa:	4770      	bx	lr

080011ac <USART_GetITStatus>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80011ac:	f3c1 1242 	ubfx	r2, r1, #5, #3
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80011b0:	b410      	push	{r4}
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 80011b2:	2301      	movs	r3, #1
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80011b4:	f001 041f 	and.w	r4, r1, #31
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80011b8:	2a01      	cmp	r2, #1
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 80011ba:	fa03 f304 	lsl.w	r3, r3, r4
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80011be:	d015      	beq.n	80011ec <USART_GetITStatus+0x40>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80011c0:	2a02      	cmp	r2, #2
  {
    itmask &= USARTx->CR2;
 80011c2:	bf0c      	ite	eq
 80011c4:	8a02      	ldrheq	r2, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80011c6:	8a82      	ldrhne	r2, [r0, #20]
 80011c8:	b292      	uxth	r2, r2
 80011ca:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 80011cc:	8802      	ldrh	r2, [r0, #0]
 80011ce:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80011d0:	b14b      	cbz	r3, 80011e6 <USART_GetITStatus+0x3a>
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 80011d2:	2301      	movs	r3, #1
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 80011d4:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 80011d6:	fa03 f101 	lsl.w	r1, r3, r1
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
  {
    bitstatus = SET;
 80011da:	420a      	tst	r2, r1
 80011dc:	bf14      	ite	ne
 80011de:	4618      	movne	r0, r3
 80011e0:	2000      	moveq	r0, #0
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 80011e2:	bc10      	pop	{r4}
 80011e4:	4770      	bx	lr
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 80011e6:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 80011e8:	bc10      	pop	{r4}
 80011ea:	4770      	bx	lr
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 80011ec:	8982      	ldrh	r2, [r0, #12]
 80011ee:	b292      	uxth	r2, r2
 80011f0:	4013      	ands	r3, r2
 80011f2:	e7eb      	b.n	80011cc <USART_GetITStatus+0x20>

080011f4 <USART_ClearITPendingBit>:
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
  USARTx->SR = (uint16_t)~itmask;
 80011f4:	0a09      	lsrs	r1, r1, #8
 80011f6:	2301      	movs	r3, #1
 80011f8:	fa03 f101 	lsl.w	r1, r3, r1
 80011fc:	43c9      	mvns	r1, r1
 80011fe:	b289      	uxth	r1, r1
 8001200:	8001      	strh	r1, [r0, #0]
 8001202:	4770      	bx	lr

08001204 <memcpy>:
 8001204:	4684      	mov	ip, r0
 8001206:	ea41 0300 	orr.w	r3, r1, r0
 800120a:	f013 0303 	ands.w	r3, r3, #3
 800120e:	d16d      	bne.n	80012ec <memcpy+0xe8>
 8001210:	3a40      	subs	r2, #64	; 0x40
 8001212:	d341      	bcc.n	8001298 <memcpy+0x94>
 8001214:	f851 3b04 	ldr.w	r3, [r1], #4
 8001218:	f840 3b04 	str.w	r3, [r0], #4
 800121c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001220:	f840 3b04 	str.w	r3, [r0], #4
 8001224:	f851 3b04 	ldr.w	r3, [r1], #4
 8001228:	f840 3b04 	str.w	r3, [r0], #4
 800122c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001230:	f840 3b04 	str.w	r3, [r0], #4
 8001234:	f851 3b04 	ldr.w	r3, [r1], #4
 8001238:	f840 3b04 	str.w	r3, [r0], #4
 800123c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001240:	f840 3b04 	str.w	r3, [r0], #4
 8001244:	f851 3b04 	ldr.w	r3, [r1], #4
 8001248:	f840 3b04 	str.w	r3, [r0], #4
 800124c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001250:	f840 3b04 	str.w	r3, [r0], #4
 8001254:	f851 3b04 	ldr.w	r3, [r1], #4
 8001258:	f840 3b04 	str.w	r3, [r0], #4
 800125c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001260:	f840 3b04 	str.w	r3, [r0], #4
 8001264:	f851 3b04 	ldr.w	r3, [r1], #4
 8001268:	f840 3b04 	str.w	r3, [r0], #4
 800126c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001270:	f840 3b04 	str.w	r3, [r0], #4
 8001274:	f851 3b04 	ldr.w	r3, [r1], #4
 8001278:	f840 3b04 	str.w	r3, [r0], #4
 800127c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001280:	f840 3b04 	str.w	r3, [r0], #4
 8001284:	f851 3b04 	ldr.w	r3, [r1], #4
 8001288:	f840 3b04 	str.w	r3, [r0], #4
 800128c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001290:	f840 3b04 	str.w	r3, [r0], #4
 8001294:	3a40      	subs	r2, #64	; 0x40
 8001296:	d2bd      	bcs.n	8001214 <memcpy+0x10>
 8001298:	3230      	adds	r2, #48	; 0x30
 800129a:	d311      	bcc.n	80012c0 <memcpy+0xbc>
 800129c:	f851 3b04 	ldr.w	r3, [r1], #4
 80012a0:	f840 3b04 	str.w	r3, [r0], #4
 80012a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80012a8:	f840 3b04 	str.w	r3, [r0], #4
 80012ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80012b0:	f840 3b04 	str.w	r3, [r0], #4
 80012b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80012b8:	f840 3b04 	str.w	r3, [r0], #4
 80012bc:	3a10      	subs	r2, #16
 80012be:	d2ed      	bcs.n	800129c <memcpy+0x98>
 80012c0:	320c      	adds	r2, #12
 80012c2:	d305      	bcc.n	80012d0 <memcpy+0xcc>
 80012c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80012c8:	f840 3b04 	str.w	r3, [r0], #4
 80012cc:	3a04      	subs	r2, #4
 80012ce:	d2f9      	bcs.n	80012c4 <memcpy+0xc0>
 80012d0:	3204      	adds	r2, #4
 80012d2:	d008      	beq.n	80012e6 <memcpy+0xe2>
 80012d4:	07d2      	lsls	r2, r2, #31
 80012d6:	bf1c      	itt	ne
 80012d8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80012dc:	f800 3b01 	strbne.w	r3, [r0], #1
 80012e0:	d301      	bcc.n	80012e6 <memcpy+0xe2>
 80012e2:	880b      	ldrh	r3, [r1, #0]
 80012e4:	8003      	strh	r3, [r0, #0]
 80012e6:	4660      	mov	r0, ip
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	2a08      	cmp	r2, #8
 80012ee:	d313      	bcc.n	8001318 <memcpy+0x114>
 80012f0:	078b      	lsls	r3, r1, #30
 80012f2:	d08d      	beq.n	8001210 <memcpy+0xc>
 80012f4:	f010 0303 	ands.w	r3, r0, #3
 80012f8:	d08a      	beq.n	8001210 <memcpy+0xc>
 80012fa:	f1c3 0304 	rsb	r3, r3, #4
 80012fe:	1ad2      	subs	r2, r2, r3
 8001300:	07db      	lsls	r3, r3, #31
 8001302:	bf1c      	itt	ne
 8001304:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001308:	f800 3b01 	strbne.w	r3, [r0], #1
 800130c:	d380      	bcc.n	8001210 <memcpy+0xc>
 800130e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8001312:	f820 3b02 	strh.w	r3, [r0], #2
 8001316:	e77b      	b.n	8001210 <memcpy+0xc>
 8001318:	3a04      	subs	r2, #4
 800131a:	d3d9      	bcc.n	80012d0 <memcpy+0xcc>
 800131c:	3a01      	subs	r2, #1
 800131e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001322:	f800 3b01 	strb.w	r3, [r0], #1
 8001326:	d2f9      	bcs.n	800131c <memcpy+0x118>
 8001328:	780b      	ldrb	r3, [r1, #0]
 800132a:	7003      	strb	r3, [r0, #0]
 800132c:	784b      	ldrb	r3, [r1, #1]
 800132e:	7043      	strb	r3, [r0, #1]
 8001330:	788b      	ldrb	r3, [r1, #2]
 8001332:	7083      	strb	r3, [r0, #2]
 8001334:	4660      	mov	r0, ip
 8001336:	4770      	bx	lr

08001338 <main>:
//作者：正点原子 @ALIENTEK

int main(void)
{
	u32 t=0;
	uart_init(115200);
 8001338:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200

//广州市星翼电子科技有限公司  
//作者：正点原子 @ALIENTEK

int main(void)
{
 800133c:	b508      	push	{r3, lr}
	u32 t=0;
	uart_init(115200);
 800133e:	f7fe ff69 	bl	8000214 <uart_init>
	delay_init(84);
 8001342:	2054      	movs	r0, #84	; 0x54
 8001344:	f7fe fec2 	bl	80000cc <delay_init>
	
  while(1){
    printg("t:%d\r\n",t);
		delay_ms(1000);
 8001348:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800134c:	f7fe ff0c 	bl	8000168 <delay_ms>
 8001350:	e7fa      	b.n	8001348 <main+0x10>
 8001352:	bf00      	nop

08001354 <memset>:
 8001354:	b470      	push	{r4, r5, r6}
 8001356:	0784      	lsls	r4, r0, #30
 8001358:	d046      	beq.n	80013e8 <memset+0x94>
 800135a:	1e54      	subs	r4, r2, #1
 800135c:	2a00      	cmp	r2, #0
 800135e:	d041      	beq.n	80013e4 <memset+0x90>
 8001360:	b2cd      	uxtb	r5, r1
 8001362:	4603      	mov	r3, r0
 8001364:	e002      	b.n	800136c <memset+0x18>
 8001366:	1e62      	subs	r2, r4, #1
 8001368:	b3e4      	cbz	r4, 80013e4 <memset+0x90>
 800136a:	4614      	mov	r4, r2
 800136c:	f803 5b01 	strb.w	r5, [r3], #1
 8001370:	079a      	lsls	r2, r3, #30
 8001372:	d1f8      	bne.n	8001366 <memset+0x12>
 8001374:	2c03      	cmp	r4, #3
 8001376:	d92e      	bls.n	80013d6 <memset+0x82>
 8001378:	b2cd      	uxtb	r5, r1
 800137a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800137e:	2c0f      	cmp	r4, #15
 8001380:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8001384:	d919      	bls.n	80013ba <memset+0x66>
 8001386:	f103 0210 	add.w	r2, r3, #16
 800138a:	4626      	mov	r6, r4
 800138c:	3e10      	subs	r6, #16
 800138e:	2e0f      	cmp	r6, #15
 8001390:	f842 5c10 	str.w	r5, [r2, #-16]
 8001394:	f842 5c0c 	str.w	r5, [r2, #-12]
 8001398:	f842 5c08 	str.w	r5, [r2, #-8]
 800139c:	f842 5c04 	str.w	r5, [r2, #-4]
 80013a0:	f102 0210 	add.w	r2, r2, #16
 80013a4:	d8f2      	bhi.n	800138c <memset+0x38>
 80013a6:	f1a4 0210 	sub.w	r2, r4, #16
 80013aa:	f022 020f 	bic.w	r2, r2, #15
 80013ae:	f004 040f 	and.w	r4, r4, #15
 80013b2:	3210      	adds	r2, #16
 80013b4:	2c03      	cmp	r4, #3
 80013b6:	4413      	add	r3, r2
 80013b8:	d90d      	bls.n	80013d6 <memset+0x82>
 80013ba:	461e      	mov	r6, r3
 80013bc:	4622      	mov	r2, r4
 80013be:	3a04      	subs	r2, #4
 80013c0:	2a03      	cmp	r2, #3
 80013c2:	f846 5b04 	str.w	r5, [r6], #4
 80013c6:	d8fa      	bhi.n	80013be <memset+0x6a>
 80013c8:	1f22      	subs	r2, r4, #4
 80013ca:	f022 0203 	bic.w	r2, r2, #3
 80013ce:	3204      	adds	r2, #4
 80013d0:	4413      	add	r3, r2
 80013d2:	f004 0403 	and.w	r4, r4, #3
 80013d6:	b12c      	cbz	r4, 80013e4 <memset+0x90>
 80013d8:	b2c9      	uxtb	r1, r1
 80013da:	441c      	add	r4, r3
 80013dc:	f803 1b01 	strb.w	r1, [r3], #1
 80013e0:	42a3      	cmp	r3, r4
 80013e2:	d1fb      	bne.n	80013dc <memset+0x88>
 80013e4:	bc70      	pop	{r4, r5, r6}
 80013e6:	4770      	bx	lr
 80013e8:	4614      	mov	r4, r2
 80013ea:	4603      	mov	r3, r0
 80013ec:	e7c2      	b.n	8001374 <memset+0x20>
 80013ee:	bf00      	nop
